<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在 Ubuntu 20.04 上部署 Jenkins 并配置 Nginx 反向代理</title>
    <link href="/2024/09/27/install-jenkins/"/>
    <url>/2024/09/27/install-jenkins/</url>
    
    <content type="html"><![CDATA[<h3 id="通过-docker-部署">通过 Docker 部署</h3><ol type="1"><li><p>创建一个 Docker 网络 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create jenkins<br></code></pre></td></tr></table></figure></p></li><li><p>下载并运行 docker:dind Docker 镜像以在 Jenkins 节点内执行 Docker命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name jenkins-docker --<span class="hljs-built_in">rm</span> --detach \<br>  --privileged --network jenkins --network-alias docker \<br>  --<span class="hljs-built_in">env</span> DOCKER_TLS_CERTDIR=/certs \<br>  --volume jenkins-docker-certs:/certs/client \<br>  --volume jenkins-data:/var/jenkins_home \<br>  --publish 2376:2376 \<br>  docker:dind --storage-driver overlay2<br></code></pre></td></tr></table></figure></p></li><li><p>自定义 Jenkins Docker 镜像 <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> jenkins/jenkins:<span class="hljs-number">2.462</span>.<span class="hljs-number">2</span>-jdk17<br><span class="hljs-keyword">USER</span> root<br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y lsb-release</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \</span><br><span class="language-bash">  https://download.docker.com/linux/debian/gpg</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> \</span></span><br><span class="hljs-string"><span class="language-bash">  signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \</span></span><br><span class="hljs-string"><span class="language-bash">  https://download.docker.com/linux/debian \</span></span><br><span class="hljs-string"><span class="language-bash">  <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y docker-ce-cli</span><br><span class="hljs-keyword">USER</span> jenkins<br><span class="hljs-keyword">RUN</span><span class="language-bash"> jenkins-plugin-cli --plugins <span class="hljs-string">&quot;blueocean docker-workflow&quot;</span></span><br></code></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t myjenkins-blueocean:2.462.2-1 .<br></code></pre></td></tr></table></figure></p></li><li><p>运行 Jenkins Docker 镜像 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name <span class="hljs-variable">$&#123;your_container_name&#125;</span> \<br>  -u root --restart=on-failure --detach \<br>  --network jenkins --<span class="hljs-built_in">env</span> DOCKER_HOST=tcp://docker:2376 \<br>  --<span class="hljs-built_in">env</span> DOCKER_CERT_PATH=/certs/client --<span class="hljs-built_in">env</span> DOCKER_TLS_VERIFY=1 \<br>  --<span class="hljs-built_in">env</span> JENKINS_OPTS=<span class="hljs-string">&quot;–-prefix=/<span class="hljs-variable">$&#123;your_prefix&#125;</span>&quot;</span> \<br>  --publish 20000:8080 --publish 50000:50000 \<br>  --volume jenkins-data:/var/jenkins_home \<br>  --volume jenkins-docker-certs:/certs/client:ro \<br>  myjenkins-blueocean:2.462.2-1<br></code></pre></td></tr></table></figure></p></li></ol><p>--prefix=/${your_prefix}/ 用于配置 Jenkins 的路径前缀</p><h3 id="配置-nginx-反向代理">配置 Nginx 反向代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /<span class="hljs-variable">$&#123;your_prefix&#125;</span>/ &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://localhost:<span class="hljs-variable">$&#123;your_port&#125;</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输入密码">输入密码</h3><p><img src="/img/2024/09/27/jenkins.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker <span class="hljs-built_in">exec</span> -it <span class="hljs-variable">$&#123;your_container_name&#125;</span> bash<br><span class="hljs-built_in">cd</span> /var/jenkins_home/secrets/<br>vi initialAdminPassword<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Jenkins</tag>
      
      <tag>Nginx</tag>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clash For Windows 占用 WiFi</title>
    <link href="/2024/04/14/clash-for-windows-occupies-WiFi/"/>
    <url>/2024/04/14/clash-for-windows-occupies-WiFi/</url>
    
    <content type="html"><![CDATA[<p>上周三（2024/4/10）晚上，笔记本 WiFi虽然信号满格，但加载网页速度很慢。我在手机上刷B站，视频也开始卡顿。于是我询问朋友是否是 WiFi出了问题（因为一些原因连的都是学校的WiFi），但大家表示很流畅，所以是我这里出了问题，但我周围并没有人在下载大文件占用带宽，非常奇怪。由于稍稍等待还能加载出来，所以没当一回事。</p><hr /><p>周四（2024/4/11）晚上，我打开 LOL进行一场快乐的极地大乱斗，随机到了猫（悠米）。这原本是一场当挂件的躺赢游戏，但进入游戏后疯狂瞬移，摸鱼飞弹就没中过，根本没法操作，令我怀疑人生。黑屏期间我注意到fps &gt;200，所以是网络问题，那大概率是丢包了。游戏不出意外的输了，结束后，我去测速得到了匪夷所思的结果：<img src="/img/2024/04/14/pre_test.png" /> 且不提带宽居然如此低，Ping居然高达 500，难以置信。随后我就开始思考可能的原因：</p><ol type="1"><li>这学期为了连接学校的 NOTS，被迫安装了先前折磨过我的 Cisco Anyconnect<ahref="https://term-inator.github.io/2022/07/05/Cisco-Anyconnect/">CiscoAnyconnect 和网络连接冲突</a>，可能是它再次作妖。</li><li>几天前安装了 Cuda for WSL，导致 C 盘空间少了 150G（剩余50G），联想到几年前 C 盘剩余空间接近 0时打不开网页的经历，可能是空间不足导致的。</li></ol><p>于是我先卸载了 Cisco Anyconnect，然后把 WSL 迁移到 D盘，重启后都没解决问题，只好睡觉。</p><hr /><p>第二天（2024/4/12）起床打开电脑测速，惊奇地发现一切正常，便认为昨天的方法奏效了。但下午的课要做pre，我的电脑开始变卡。在轮到我的小组做 pre 时，我的 zoom多次卡顿闪退，非常难受。</p><p>晚上回到家我又想了几种可能性：</p><ol type="1"><li>可能是 DNS 配置的问题</li><li>可能是无线网卡驱动的问题</li></ol><p>于是我先把 DNS 全部换成 Google的，然后重新安装了网卡驱动，结果都无济于事。</p><p>我不禁开始担心无线网卡出现了问题，因为之前出现过掉网卡驱动的事。但下载网卡驱动时发生的事让我有了新的思路。 由于带宽很低，一个 40MB的网卡驱动预估的下载时间是两个小时（8kb/s），于是我尝试通过重启重置网络连接提高下载的速度。在某一次重启后，下载速度达到了（300kb/s），提高了近 40 倍！</p><hr /><p>周五（2024/4/13），怀着睡了一觉问题就自动解决了的幻想打开星穹铁道推剧情。期间被转圈加载、连接超时自动退出登录、登录发送验证码超时、登录超时、登陆异常、服务器分发异常疯狂折磨。登录半小时，游玩半小时，非常痛苦。</p><hr /><p>考虑到游戏过程中机器温度上升，周六（2024/4/13）我提出了一个猜想：</p><p>可能刚开机时，机器温度低，网卡正常工作。开机一段时间后，机器温度升高，网卡工作异常。而我的电脑还没清过灰，很可能出现散热问题。但理论上温度不应该影响网卡。我在早上多次开机关机进行测试，发现和猜想一致：刚开机时网速正常，开机一段时间就异常。但接着我让风扇全速运行，降低CPU 温度，再次测试网速，发现还是异常，说明猜想错误。</p><p>在我开始考虑要不要买一个外置 USB网卡时，手机打开网页也开始变卡了。我突然想到另一种可能性：</p><p>可能是某个程序开机自启动，不停地占用带宽，导致其他应用得到的带宽变少。这时我联想到大约一周前我不顾浏览器劝阻，点开了一个疑似被黑的网站。难道是中毒了？于是我开始扫描C 盘进行排查。期间 CPU工作过于努力，电脑一度烫手，于是我打开任务管理器，尝试查看 CPU占用和温度，却发现 WiFi 的吞吐量异常： <imgsrc="/img/2024/04/14/wifi.png" />随后我在任务管理器中找到了一个神奇的进程： <imgsrc="/img/2024/04/14/clash.png" /> 关闭 Clash For Windows后一切恢复正常，终于水落石出。以前用这个软件时，为了方便设置了开机自启动。后来不用了，也只是改成直连（Direct）模式，并没有关闭开机自启动。这也就解释了为什么刚开机时网络一切正常，因为系统还没来得及启动这个软件。<img src="/img/2024/04/14/post_test.png" /></p><p>这个软件的作者去年被叫去喝茶，不得不删库跑路，导致没人维护这个软件。考虑到一周前还没出问题，难道是被人利用了软件漏洞？总之解决了就好。如此简单的问题，却让我花了三天时间，可笑可笑。</p>]]></content>
    
    
    <categories>
      
      <category>Problems(Solved)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clash For Windows</tag>
      
      <tag>WiFi</tag>
      
      <tag>Ping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RStudio 生成 pdf 文件失败</title>
    <link href="/2024/01/14/RStudio-complie-pdf-report-failed/"/>
    <url>/2024/01/14/RStudio-complie-pdf-report-failed/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>将 R Script 转换为 pdf 文件时，出现如下错误： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">! LaTeX Error: Unicode character 载 (U+8F7D)<br>               not <span class="hljs-built_in">set</span> up <span class="hljs-keyword">for</span> use with LaTeX.<br></code></pre></td></tr></table></figure></p><h3 id="环境">环境</h3><p>OS: Win11<br />RStudio: 2023.12.0 Build 369<br />R: 4.3.2<br /></p><h3 id="解决方案">解决方案</h3><h4 id="修改-rstudio-的语言">1. 修改 RStudio 的语言</h4><p>在文件头部添加如下代码： <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">Sys.setenv<span class="hljs-punctuation">(</span>LANGUAGE <span class="hljs-operator">=</span> <span class="hljs-string">&quot;en&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></p><h4 id="关闭可能的中文输出">2. 关闭可能的中文输出</h4><p>载入包时会输出一些信息，如 library(UsingR) 会输出： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## Loading required package: MASS</span><br><span class="hljs-comment">## Loading required package: HistData</span><br><span class="hljs-comment">## Loading required package: Hmisc</span><br></code></pre></td></tr></table></figure>如果系统语言是中文，这些信息会是中文 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 载入需要的程辑包：MASS</span><br><span class="hljs-comment">## 载入需要的程辑包：HistData</span><br><span class="hljs-comment">## 载入需要的程辑包：Hmisc</span><br></code></pre></td></tr></table></figure> 对于 library函数，可以使用 SuppressPackageStartupMessages 函数来禁止输出信息<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">suppressPackageStartupMessages<span class="hljs-punctuation">(</span>library<span class="hljs-punctuation">(</span>UsingR<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></p><p>可以先生成 HTML文件查看是否有中文，然后修改那些会输出中文的语句<br />比如删除 help 函数</p>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R</tag>
      
      <tag>RStudio</tag>
      
      <tag>LaTeX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows CMD [已退出进程，代码为 1 (0x00000001)]</title>
    <link href="/2024/01/14/windows-terminal/"/>
    <url>/2024/01/14/windows-terminal/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>卸载 Anaconda 后， 打开 CMD(命令提示符) 时，出现如下错误：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[已退出进程，代码为 1 (0x00000001)] 现在可以使用Ctrl+D关闭此终端，或按 Enter 重新启动。<br></code></pre></td></tr></table></figure> Windows PowerShell 正常</p><h3 id="环境">环境</h3><p>OS: Win11</p><h3 id="解决方案">解决方案</h3><ol type="1"><li>打开注册表 win + r 输入 regedit</li><li>将 HKEY_CURRENT_USERProcessor 中的 AutoRun 赋值为空</li><li>将 HKEY_LOCAL_MACHINEProcessor 中的 AutoRun赋值为空（我这里没有这个键值）</li><li>问题解决</li></ol><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://www.zhihu.com/question/464682040">Win10打开cmd闪退怎么办？</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://blog.csdn.net/differencer/article/details/126809272#:~:text=%E8%A7%A3%E5%86%B3%EF%BC%9A%E5%8D%B8%E8%BD%BDanaconda%E5%90%8E%20cmd%E9%97%AA%E9%80%80%E6%88%96%E6%89%93%E4%B8%8D%E5%BC%80%201%20win%E9%94%AE%2Br%20%E8%BE%93%E5%85%A5regedit%20%E5%9B%9E%E8%BD%A6%EF%BC%8C%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%BC%96%E8%BE%91%E5%99%A8%E9%A1%B5%E9%9D%A2%202%20%E6%89%BE%E5%88%B0HKEY_CURRENT_USER%5CSoftware%5CMicrosoft%5CCommand,Processor%E6%96%87%E4%BB%B6%E5%A4%B9%20%E5%A6%82%E6%9E%9C%E6%9C%89AutoRun%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E5%88%99%E5%B0%86%E5%8F%98%E9%87%8F%E6%95%B0%E5%80%BC%E6%95%B0%E6%8D%AE%E2%80%9C%E7%BD%AE%E7%A9%BA%E2%80%9D%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89AutoRun%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E5%88%99%E5%8F%B3%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E6%96%B0%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%BC%EF%BC%8C%E5%8F%98%E9%87%8F%E5%90%8D%E7%A7%B0%E5%91%BD%E5%90%8D%E4%B8%BAAutoRun%EF%BC%8C%E5%8F%98%E9%87%8F%E6%95%B0%E5%80%BC%E4%B8%8D%E7%94%A8%E8%AE%BE%E7%BD%AE%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%B0%B1%E6%98%AF%E7%A9%BA%E5%80%BC%E3%80%82%203%20%E6%89%BE%E5%88%B0%20HKEY_LOCAL_MACHINE%5CSoftware%5CMicrosoft%5CCommand%20Processor%20%E5%90%8C%E6%A0%B7%E6%89%BEAutoRun%EF%BC%8C%E4%B8%8E%E4%B8%8A%E4%B8%80%E6%AD%A5%E7%9B%B8%E5%90%8C%E6%93%8D%E4%BD%9C">解决：卸载anaconda后cmd闪退或打不开</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://github.com/ContinuumIO/anaconda-issues/issues/11702">Anacondauninstall left my system broken</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Problems(Solved)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>terminal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jupyter 无法将含 \begin{align} 的 Markdown 导出为 PDF</title>
    <link href="/2023/09/06/jupyter-export-pdf-error/"/>
    <url>/2023/09/06/jupyter-export-pdf-error/</url>
    
    <content type="html"><![CDATA[<p>用 jupyter notebook 写作业，导出成 PDF 时(PDF viaLaTex)，出现了错误。</p><p><img src="/img/2023/09/06/error.png" /></p><p>阅读发现和 \end{align} 有关，原因不明。</p><p>用 split 替换 align后，问题解决。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[Failed to run &#39;xelatex .\notebook.tex -quiet&#39; command when trying to download Jupyter Notebook as PDF](https://stackoverflow.com/questions/62354358/failed-to-run-xelatex-notebook-tex-quiet-command-when-trying-to-download-ju)">[1]</span></a></sup></p><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://stackoverflow.com/questions/62354358/failed-to-run-xelatex-notebook-tex-quiet-command-when-trying-to-download-ju">Failedto run 'xelatex ..tex -quiet' command when trying to download JupyterNotebook as PDF</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Problems(Solved)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jupyter</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Electron Vite 项目中使用 Prisma</title>
    <link href="/2023/07/23/use-prisma-with-electron/"/>
    <url>/2023/07/23/use-prisma-with-electron/</url>
    
    <content type="html"><![CDATA[<p>我是用 <a href="https://github.com/alex8088/electron-vite">ElectronVite</a> + <a href="https://github.com/prisma/prisma">Prisma</a> +SQlite 做了个项目 <ahref="https://github.com/Term-inator/Schedule">Schedule</a>，在用electron-builder + nsis 打包的时候遇到了问题。</p><p>完成这件事会遇到两个问题<br />1. 数据库在 dev 和 prod 环境路径不同，Prisma 可能找不到数据库<br />2. 由于 <span class="citation"data-cites="prisma/client">@prisma/client</span> 的代码是 Prisma 根据*.prisma 文件生成的，不在 dependencies 中，可能不会被打包</p><h3 id="问题一">问题一</h3><p>prima 文件中默认 dev 环境的数据库 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prisma">// src/prisma/schema.prisma<br>datasource db &#123;<br>  provider = &quot;sqlite&quot;<br>  url      = &quot;file:./dev.db&quot;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>electron-builder.yml 把 prod 数据库打包进 resources/<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># electron-builder.yml</span><br><span class="hljs-attr">extraResources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;database/**/*&#x27;</span><br></code></pre></td></tr></table></figure></p><p>实例化 PrismaClient 的时候根据 is.dev 计算数据库路径dbPath，然后覆盖配置 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/main/client.ts</span><br><span class="hljs-keyword">import</span> &#123; is &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@electron-toolkit/utils&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaClient</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@prisma/client&#x27;</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><br><span class="hljs-keyword">const</span> globalForPrisma = globalThis <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> &#123; <span class="hljs-attr">prisma</span>: <span class="hljs-title class_">PrismaClient</span> &#125;<br><span class="hljs-keyword">const</span> dbPath = is.<span class="hljs-property">dev</span> ? <span class="hljs-string">&#x27;dev.db&#x27;</span> : path.<span class="hljs-title function_">join</span>(process.<span class="hljs-property">resourcesPath</span>, <span class="hljs-string">&quot;database/prod.db&quot;</span>)<br><br><span class="hljs-comment">// 保证只有一个实例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> prisma =<br>  globalForPrisma.<span class="hljs-property">prisma</span> || <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrismaClient</span>(&#123;<br>    <span class="hljs-attr">datasources</span>: &#123;<br>      <span class="hljs-attr">db</span>: &#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`file:<span class="hljs-subst">$&#123;dbPath&#125;</span>`</span>,<br>      &#125;,<br>    &#125;<br>  &#125;)<br></code></pre></td></tr></table></figure></p><h3 id="问题二">问题二</h3><p>直接打包运行会报错</p><p><img src="/img/2023/07/23/error.png" /></p><p>一个简单的解决方法是把 .prisma 和 <span class="citation"data-cites="prisma/client">@prisma/client</span> 当作 extraResources打包进去</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># electron-builder.yml</span><br><span class="hljs-attr">extraResources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node_modules/.prisma/**/*&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node_modules/@prisma/client/**/*&#x27;</span><br></code></pre></td></tr></table></figure><p>安装后，resources/ 下就会出现 node_modules 文件夹，运行也不再报错</p><p>详细改动可以参考这个<ahref="https://github.com/Term-inator/electron-vue3ts-prisma-template">模板</a></p><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span><a href="https://github.com/prisma/prisma/issues/9613">UsingPrisma with the Electron Framework</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://github.com/NickyMeuleman/electron-trpc-prisma">electron-trpc-prisma</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vite</tag>
      
      <tag>Electron</tag>
      
      <tag>Prisma</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Pillow 库打开 heic heif 格式的图片</title>
    <link href="/2023/06/14/open-heic-image-by-Pillow/"/>
    <url>/2023/06/14/open-heic-image-by-Pillow/</url>
    
    <content type="html"><![CDATA[<p>Apple 相册中存在 heic 格式的图片，在 Python中无法用一般方法打开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pillow_heif<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> pillow_heif <span class="hljs-keyword">import</span> register_heif_opener<br><br>register_heif_opener()<br><br>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;image.heic&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://stackoverflow.com/questions/54395735/how-to-work-with-heic-image-file-types-in-python">Howto work with HEIC image file types in Python</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Libs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Pillow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Electron Vite 初始化 Electron 项目</title>
    <link href="/2023/05/22/vite-electron/"/>
    <url>/2023/05/22/vite-electron/</url>
    
    <content type="html"><![CDATA[<p>使用 <a href="https://github.com/alex8088/electron-vite">ElectronVite</a> 可以快速初始化 Electron 项目 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create @quick-start/electron<br></code></pre></td></tr></table></figure></p><p>选择 vue3 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Need to install the following packages:<br>@quick-start/create-electron@1.0.12<br>Ok to proceed? (y) y<br>√ Project name: ... <br>√ Package name: ... <br>√ Select a framework: » vue<br>√ Add TypeScript? ... No / Yes<br>√ Add Electron updater plugin? ... No / Yes<br>√ Enable Electron download mirror proxy? ... No / Yes<br></code></pre></td></tr></table></figure></p><p>安装依赖 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i<br></code></pre></td></tr></table></figure> 安装失败则改成 cnpm</p><p>启动项目 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev<br></code></pre></td></tr></table></figure> <imgsrc="/img/2023/05/22/electron_vite.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vite</tag>
      
      <tag>Electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux qpdf 拼接 pdf 文件</title>
    <link href="/2023/05/17/concatenate-pdf/"/>
    <url>/2023/05/17/concatenate-pdf/</url>
    
    <content type="html"><![CDATA[<ol type="1"><li><p>安装 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qpdf<br></code></pre></td></tr></table></figure></p></li><li><p>合并 pdf 文件 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">qpdf <span class="hljs-attr">--empty</span> <span class="hljs-attr">--pages</span> file1<span class="hljs-selector-class">.pdf</span> file2<span class="hljs-selector-class">.pdf</span> -- merged.pdf<br></code></pre></td></tr></table></figure> 将 file2 拼接到 file1 末尾，生成新的merged.pdf</p></li><li><p>穿插合并 pdf 文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qpdf --empty --pages file1.pdf 1-<span class="hljs-variable">$&#123;x&#125;</span> file2.pdf 1-<span class="hljs-variable">$&#123;z&#125;</span> file1.pdf <span class="hljs-variable">$&#123;x+1&#125;</span>-<span class="hljs-variable">$&#123;y&#125;</span> -- merged.pdf<br></code></pre></td></tr></table></figure> 按照 file1 1-x 页，file2 1-z页，file1 x+1-y 页的顺序，拼接成 merge.pdf 如果写成${x+1}-z，则表示一直到最后一页</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>qpdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 系统中创建多个 ssh 密钥</title>
    <link href="/2023/04/23/ssh-keygen/"/>
    <url>/2023/04/23/ssh-keygen/</url>
    
    <content type="html"><![CDATA[<p>一个 ssh key 用在多个 ip 上似乎问题不大，但我还是更希望使用不同的 sshkey。本文作为记录。</p><h3 id="创建-ssh-key">创建 ssh key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;your_email@example.com&#125;</span>&quot;</span> -f <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;your_ssh_key_path&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>建议的路径为默认路径 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:/Users/<span class="hljs-variable">$&#123;username&#125;</span>/.ssh/id_rsa_<span class="hljs-variable">$&#123;filename&#125;</span><br></code></pre></td></tr></table></figure></p><h3 id="使用特定的-ssh-key">使用特定的 ssh key</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -i <span class="hljs-variable">$&#123;your_ssh_key_path&#125;</span> <span class="hljs-variable">$&#123;user&#125;</span>@<span class="hljs-variable">$&#123;ip&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ssh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 虚拟机使用主机代理</title>
    <link href="/2023/04/18/Ubuntu-proxy/"/>
    <url>/2023/04/18/Ubuntu-proxy/</url>
    
    <content type="html"><![CDATA[<p>因为某些原因，Linux上下载一些库非常缓慢，在虚拟机里安装代理又不如直接使用主机代理方便，所以下面的步骤非常常用，仅作为记录。</p><h3 id="步骤">步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano .bashrc<br></code></pre></td></tr></table></figure><p>在文件末尾写 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=http://<span class="hljs-variable">$&#123;代理ip&#125;</span>:<span class="hljs-variable">$&#123;代理port&#125;</span><br><span class="hljs-built_in">export</span> https_proxy=http://<span class="hljs-variable">$&#123;代理ip&#125;</span>:<span class="hljs-variable">$&#123;代理port&#125;</span><br></code></pre></td></tr></table></figure> 保存后执行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .bashrc<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Virtual Machine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nextcloud VM 部署</title>
    <link href="/2023/04/17/Nextcloud/"/>
    <url>/2023/04/17/Nextcloud/</url>
    
    <content type="html"><![CDATA[<p>本文是本地部署 Nextcloud 的记录。</p><h3 id="有用的链接">有用的链接</h3><p><a href="https://github.com/nextcloud/vm">VM仓库</a></p><p><ahref="https://docs.hanssonit.se/s/W6fMouPiqQz3_Mog/virtual-machines-vm/d/W6fMquPiqQz3_Moi/nextcloud-vm">VM文档</a></p><p><ahref="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Ubuntu软件仓库镜像</a></p><h3 id="流程">流程</h3><ol type="1"><li><p>下载 ova</p></li><li><p>导入到 VMware 双击 ova 选择 VMware 打开即可</p></li><li><p>启动虚拟机 启动完成后记录显示的 ip</p></li><li><p>打开终端 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh ncadmin@<span class="hljs-variable">$&#123;ip&#125;</span><br></code></pre></td></tr></table></figure> 密码 nextcloud</p></li><li><p>（可选）使用代理</p></li><li><p>（可选）使用镜像软件源 备份 /etc/apt/sources.list <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.old<br></code></pre></td></tr></table></figure>修改 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/apt/sources.list<br></code></pre></td></tr></table></figure> 用<ahref="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Ubuntu软件仓库镜像</a>的内容替换原来的内容</p></li><li><p>（如果做了5、6）再次启动部署脚本 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo bash /var/scripts/nextcloud-startup-script.sh<br></code></pre></td></tr></table></figure></p></li><li><p>跟随脚本流程完成部署</p></li><li><p>（可选）扩容磁盘 关闭虚拟机后，右键虚拟机，选择设置 -&gt; 硬盘2-&gt; 扩展 <img src="/img/2023/04/17/expand_disk.png" /> 查看 zpool 状态<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zpool status<br></code></pre></td></tr></table></figure> 结果为： <img src="/img/2023/04/17/zpool_status.png" />执行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo partprobe<br>sudo zpool online -e ncdata wwn-0x6000c2979bd2bf346fc8f256f16d4dbd<br></code></pre></td></tr></table></figure></p></li><li><p>（可选）设置透明压缩 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo zfs <span class="hljs-built_in">set</span> compression=lz4 ncdata<br></code></pre></td></tr></table></figure>lz4是一种压缩算法，可以选择其他的。<br />如果要查看压缩率，执行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zfs get compressratio ncdata<br></code></pre></td></tr></table></figure> 或 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zfs list -o name,used,logicalused ncdata<br></code></pre></td></tr></table></figure> used为实际占用空间，logicalused 为文件大小</p></li><li><p>（可选）配置代理 获取 root 权限 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -i<br></code></pre></td></tr></table></figure> 进入nextcloud/config 目录 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ../../var/www/nextcloud/config<br></code></pre></td></tr></table></figure> 修改 config.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$CONFIG</span> = <span class="hljs-keyword">array</span> (<br>   <span class="hljs-string">&#x27;proxy&#x27;</span> =&gt; <span class="hljs-string">&#x27;$&#123;代理ip&#125;:$&#123;代理port&#125;&#x27;</span>,<br>   ...<br>);<br></code></pre></td></tr></table></figure></p></li><li><p>（可选）如果安装 app 时超时 cURL error 28: Operation timed outafter 120000 milliseconds ... 可以尝试修改/nextcloud/lib/private/Installer.php</p></li></ol><p>将 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$timeout</span> = <span class="hljs-variable language_">$this</span>-&gt;isCLI ? <span class="hljs-number">0</span> : <span class="hljs-number">120</span>;<br></code></pre></td></tr></table></figure> 修改为 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$timeout</span> = <span class="hljs-variable language_">$this</span>-&gt;isCLI ? <span class="hljs-number">0</span> : <span class="hljs-number">300</span>;<br></code></pre></td></tr></table></figure>或更大的值。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[curl error 28](https://help.nextcloud.com/t/curl-error-28-operation-timed-out-after-xxxxxx-milliseconds-with-xxxxxx-out-of-xxxxxx-bytes-received-see-http-curl-haxx-se-libcurl-c-libcurl-errors-html/67621/2)">[3]</span></a></sup></p><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://dieken.gitlab.io/posts/dynamically-expand-zfs-pool/#:~:text=%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%20ZFS%20pool%201%20%E5%88%9B%E5%BB%BA%20zpool%EF%BC%9A%20zpool%20create,%E5%9C%A8%20Ubuntu%20%E9%87%8C%E6%89%A7%E8%A1%8C%20zpool%20online%20-e%20test%20vdb">动态扩容ZFSpool</a> <a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://blog.csdn.net/cclethe/article/details/126341073">ZFS分区扩容</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://help.nextcloud.com/t/curl-error-28-operation-timed-out-after-xxxxxx-milliseconds-with-xxxxxx-out-of-xxxxxx-bytes-received-see-http-curl-haxx-se-libcurl-c-libcurl-errors-html/67621/2">curlerror 28</a> <a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Nextcloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Nextcloud</tag>
      
      <tag>ZFS</tag>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GB2312 没有收入“啰”字</title>
    <link href="/2022/10/31/GB2312/"/>
    <url>/2022/10/31/GB2312/</url>
    
    <content type="html"><![CDATA[<h3 id="太长不看">太长不看</h3><p>如果导出数据库时使用 GB2312编码，数据里又有汉字“啰”时，会报错，因为GB2312 没有收入“啰”字。</p><h3 id="背景">背景</h3><p>最近饱受背单词折磨。之前因为想订制背单词的内容，又不想自己一个一个输入，或者对着Excel 背单词，所以使用了 <ahref="https://github.com/Term-inator/WordReview">WordReview</a>，可以读取Excel中的单词到数据库中。过了几轮单词后，我打算把所有没背熟的单词导出，每天看一遍。</p><h3 id="过程">过程</h3><h4 id="编写-sql">编写 SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> word, mean, mnemonic, note <span class="hljs-keyword">FROM</span> `words` <br><span class="hljs-keyword">WHERE</span> history <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%001&#x27;</span> <span class="hljs-keyword">or</span> history <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%00&#x27;</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> forget_num <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>其中 history 字段记录了单词背诵历史，1 代表记得，0代表不记得，所以认为那些最后一次记得但前两次不记得 和 最后两次不记得的单词是没背熟的单词。forget_num 代表忘记的次数。</p><h4 id="导出查询结果">导出查询结果</h4><p>查询出数据后，因为想偷懒，所以打算借助 phpmyadmin 导出数据（选择 CSV格式，编码GB2312），但是导出的文件显示，导出某个单词时产生了报错。然后我把 SQL里的 DESC 去掉，再导出，发现在另一个单词处报错。</p><p>找到这两个单词diffuse，garrulous，发现它们有一个共同的意思“啰嗦的”。通过控制变量法发现有“啰”就会报错。通过查询才得知GB2312没有收入“啰”字<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[为什么许多字体都没有收录啰这个字？](https://www.zhihu.com/question/37745887#:~:text=%E5%87%A0%E4%B9%8E%E6%89%80%E6%9C%89%E7%9A%84%E7%AE%80%E4%BD%93%E6%B1%89%E5%AD%97%E5%AD%97%E5%BA%93%E9%87%87%E7%94%A8%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E4%B8%BA%E4%B8%8A%E4%B8%96%E7%BA%AA80%E5%B9%B4%E4%BB%A3%E9%A2%81%E5%B8%83%E7%9A%84%20GB2312%20%E7%BC%96%E7%A0%81%EF%BC%88%E3%80%8A%E4%BF%A1%E6%81%AF%E4%BA%A4%E6%8D%A2%E7%94%A8%E6%B1%89%E5%AD%97%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E9%9B%86%E3%80%8B%EF%BC%8C%E6%A0%87%E5%87%86%E5%8F%B7%EF%BC%9AGB2312-1980%EF%BC%89%EF%BC%8C%E8%AF%A5%E7%BC%96%E7%A0%81%E5%85%B1%E6%94%B6%E5%85%A56763%E4%B8%AA%E6%B1%89%E5%AD%97%E3%80%82,%E2%80%9C%E5%95%B0%E2%80%9D%20%E5%AD%97%E5%B9%B6%E6%B2%A1%E6%9C%89%E6%94%B6%E5%85%A5%EF%BC%8C%E7%94%B1%E6%AD%A4%E5%AF%BC%E8%87%B4%E6%89%80%E6%9C%89%E9%87%87%E7%94%A8%20GB2312%20%E7%BC%96%E7%A0%81%E7%9A%84%E6%B1%89%E5%AD%97%E5%AD%97%E4%BD%93%E9%83%BD%E6%B2%A1%E6%9C%89%E6%94%B6%E5%85%A5%E8%AF%A5%E5%AD%97%E3%80%82)">[1]</span></a></sup>。</p><p>知道原因后，用 utf-8 导出然后解决中文乱码问题即可。</p><h4 id="解决乱码">解决乱码</h4><ol type="1"><li>通过 Excel解决<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[mysql load data, select into outfile 导入和导出 CSV格式](https://www.cnblogs.com/digdeep/p/12369244.html)">[2]</span></a></sup><img src="/img/2022/10/31/excel.png" /> 如图，选择“从文本/CSV”，以Unicode编码 导入数据即可。</li><li>通过记事本解决<br />用记事本打开导出的 CSV 文件，然后更改文件编码。</li></ol><h3 id="后记">后记</h3><p>顺带学习一下如何用 SQL 导出 CSV 格式的数据 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> word, mean, mnemonic, note <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;D:/words.csv&#x27;</span><br>FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;,&#x27;</span> <br>OPTIONALLY<br>ENCLOSED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span> ESCAPED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27; &#x27;</span><br>LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\n&#x27;</span>   <br><span class="hljs-keyword">FROM</span> `words` <span class="hljs-keyword">WHERE</span> history <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%001&#x27;</span> <span class="hljs-keyword">or</span> history <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%00&#x27;</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> forget_num <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure> TERMINATEDBY 分隔符（默认：\t）<br />ENCLOSED BY 字段括起字符<br />ESCAPED BY转义字符（默认：\）<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[MySQL直接导出CSV文件，并解决中文乱码的问题](https://www.cnblogs.com/xs-yqz/p/7238242.html)">[3]</span></a></sup></p><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://www.zhihu.com/question/37745887#:~:text=%E5%87%A0%E4%B9%8E%E6%89%80%E6%9C%89%E7%9A%84%E7%AE%80%E4%BD%93%E6%B1%89%E5%AD%97%E5%AD%97%E5%BA%93%E9%87%87%E7%94%A8%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E4%B8%BA%E4%B8%8A%E4%B8%96%E7%BA%AA80%E5%B9%B4%E4%BB%A3%E9%A2%81%E5%B8%83%E7%9A%84%20GB2312%20%E7%BC%96%E7%A0%81%EF%BC%88%E3%80%8A%E4%BF%A1%E6%81%AF%E4%BA%A4%E6%8D%A2%E7%94%A8%E6%B1%89%E5%AD%97%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E9%9B%86%E3%80%8B%EF%BC%8C%E6%A0%87%E5%87%86%E5%8F%B7%EF%BC%9AGB2312-1980%EF%BC%89%EF%BC%8C%E8%AF%A5%E7%BC%96%E7%A0%81%E5%85%B1%E6%94%B6%E5%85%A56763%E4%B8%AA%E6%B1%89%E5%AD%97%E3%80%82,%E2%80%9C%E5%95%B0%E2%80%9D%20%E5%AD%97%E5%B9%B6%E6%B2%A1%E6%9C%89%E6%94%B6%E5%85%A5%EF%BC%8C%E7%94%B1%E6%AD%A4%E5%AF%BC%E8%87%B4%E6%89%80%E6%9C%89%E9%87%87%E7%94%A8%20GB2312%20%E7%BC%96%E7%A0%81%E7%9A%84%E6%B1%89%E5%AD%97%E5%AD%97%E4%BD%93%E9%83%BD%E6%B2%A1%E6%9C%89%E6%94%B6%E5%85%A5%E8%AF%A5%E5%AD%97%E3%80%82">为什么许多字体都没有收录啰这个字？</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span><a href="https://www.cnblogs.com/digdeep/p/12369244.html">mysqlload data, select into outfile 导入和导出 CSV格式</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://www.cnblogs.com/xs-yqz/p/7238242.html">MySQL直接导出CSV文件，并解决中文乱码的问题</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>GB2312</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>InnoDB: Missing MLOG_CHECKPOINT at XXXXX between the checkpoint XXXXX and the end XXXXX.</title>
    <link href="/2022/10/13/XAMPP-Mysql/"/>
    <url>/2022/10/13/XAMPP-Mysql/</url>
    
    <content type="html"><![CDATA[<p>标题中的 XXXXX 代表数字</p><h3 id="问题发生时间">问题发生时间</h3><p>2022/10/13</p><h3 id="问题描述">问题描述</h3><p>Xampp mysql 又启动不了了，原因未知，报错如下： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Log">[Note] InnoDB: Mutexes and rw_locks use Windows interlocked functions<br>[Note] InnoDB: Uses event mutexes<br>[Note] InnoDB: Compressed tables use zlib 1.2.11<br>[Note] InnoDB: Number of pools: 1<br>[Note] InnoDB: Using SSE2 crc32 instructions<br>[Note] InnoDB: Initializing buffer pool, total size = 16M, instances = 1, chunk size = 16M<br>[Note] InnoDB: Completed initialization of buffer pool<br>[ERROR] InnoDB: Missing MLOG_CHECKPOINT at 5963236 between the checkpoint 5963236 and the end 5962752.<br>[ERROR] InnoDB: Plugin initialization aborted with error Generic error<br>[Note] InnoDB: Starting shutdown...<br>[ERROR] Plugin &#x27;InnoDB&#x27; init function returned error.<br>[ERROR] Plugin &#x27;InnoDB&#x27; registration as a STORAGE ENGINE failed.<br>[Note] Plugin &#x27;FEEDBACK&#x27; is disabled.<br>[ERROR] Unknown/unsupported storage engine: InnoDB<br>[ERROR] Aborting<br></code></pre></td></tr></table></figure></p><h3 id="环境">环境</h3><p>OS: Win11<br />XAMPP: 3.2.4</p><h3 id="解决方案">解决方案</h3><ol type="1"><li>删除 /mysql/data/ib_logfile<em>（</em>代表数字）</li><li>重启 mysql</li><li>问题解决</li></ol><p><strong>注意</strong>：<br />ib_logfile*是 redolog，所以删除虽然可以解决问题，但可能带来风险。不过目前我没有更好的解决方案。<br />该数据库是我个人使用且业务量不大，从目前的结果看没有丢失数据。</p><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://nready.net/xampp-error-mysql-shutdown-unexpectedly-wont-start-again/">XAMPPError: InnoDB/MySQL shutdown unexpectedly won’t start again</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://dba.stackexchange.com/questions/163445/innodb-ignoring-the-redo-log-due-to-missing-mlog-checkpoint">InnoDB:Ignoring the redo log due to missing MLOG_CHECKPOINT</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://support.inductiveautomation.com/hc/en-us/articles/4415186180493-MySQL-or-MariaDB-is-faulted-due-a-startup-error">MySQLor MariaDB is faulted due a startup error</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Problems(Solved)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XAMPP</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>维吉尼亚密码</title>
    <link href="/2022/10/04/vigenere-cipher/"/>
    <url>/2022/10/04/vigenere-cipher/</url>
    
    <content type="html"><![CDATA[<h3 id="维吉尼亚密码">维吉尼亚密码</h3><p><ahref="https://term-inator.github.io/2022/09/20/caesar-cipher/">凯撒密码</a>的升级版。定义 <span class="math inline">\(CaesarEnc(p, k), CaesarDec(p,k)\)</span> 为凯撒加密和解密。秘钥 K 为一个长为 d 的大写字母符串。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getIndex</span>(<span class="hljs-params">char</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encryption</span>(<span class="hljs-params">S, K</span>):<br>  res = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(S)):<br>    res += CaesarEnc(S[i], getIndex(K[i % d]))<br>  <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decryption</span>(<span class="hljs-params">S, K</span>):<br>  res = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(S)):<br>    res += CaesarDec(S[i], getIndex(K[i % d]))<br>  <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>虽然维吉尼亚密码一度被认为不可能被破解，但事实上它不是完善保密加密。<br />令 <span class="math inline">\(\Pi = (Gen, Enc, Dec)\)</span>表示维吉尼亚密码，秘钥长度 <span class="math inline">\(d \in \{1,2\}\)</span><br />1. 敌手 <span class="math inline">\(A\)</span> 输出一对信息 <spanclass="math inline">\(m_0 = aa, m_1 = ab\)</span><br />2. 由 <span class="math inline">\(Gen\)</span> 产生一个随机秘钥 <spanclass="math inline">\(k\)</span>，在 <span class="math inline">\(m_0,m_1\)</span> 中随机选择一个加密，得到挑战密文 <spanclass="math inline">\(c_1c_2 = Enc_k(m_b), b \in \{0, 1\}\)</span><br />3. 如果 <span class="math inline">\(c_1 = c_2\)</span>，输出 0，否则输出1</p><p>现在计算 <span class="math inline">\(Pr[PrivK_{A, \Pi}^{eav} =1]\)</span> <span class="math display">\[\begin{aligned}&amp; Pr[PrivK_{A, \Pi}^{eav} = 1] \\&amp; = \frac{1}{2} \times Pr[PrivK_{A, \Pi}^{eav} = 1|b = 0] +\frac{1}{2} \times Pr[PrivK_{A, \Pi}^{eav} = 1|b = 1] \\&amp; = \frac{1}{2} \times Pr[A \ outputs \ 0|b = 0] + \frac{1}{2}\times Pr[A \ outputs \ 1|b = 1]\end{aligned}\]</span> 1. 当 <span class="math inline">\(m_b = aa\)</span> 时， <spanclass="math display">\[\begin{aligned}&amp; Pr[A \ outputs \ 0|b = 0] \\&amp; = \frac{1}{2} \times Pr[c_1 = c_2|d = 1] + \frac{1}{2} \timesPr[c_1 = c_2|d = 2] \\&amp; = \frac{1}{2} + \frac{1}{2} \times \frac{1}{26} \approx 0.52\end{aligned}\]</span> 2. 当 <span class="math inline">\(m_b = ab\)</span> 时， <spanclass="math display">\[\begin{aligned}&amp; Pr[A \ outputs \ 1|b = 1] = 1 - Pr[A \ outputs \ 0|b = 1] \\&amp; = 1 - (\frac{1}{2} \times Pr[c_1 = c_2 - 1|d = 1] + \frac{1}{2}\times Pr[c_1 = c_2 - 1|d = 2]) \\&amp; = 1 - (0 + \frac{1}{2} \times \frac{1}{26}) \approx 0.98\end{aligned}\]</span> <span class="math inline">\(Pr[PrivK_{A, \Pi}^{eav} = 1]\approx \frac{1}{2} \times 0.52 + \frac{1}{2} \times 0.98 = 0.75 &gt;\frac{1}{2}\)</span></p><h3 id="破解方法">破解方法</h3><p>首先要知道秘钥的长度。</p><h4 id="kasiski-测试法">Kasiski 测试法</h4><p>因为英文中有很多出现频繁的2字词或3字词，比如 the。虽然说不同位置的the 会被加密成不通的字符串，但对于两个相距 d（秘钥长度）的倍数的the，加密的结果是相同的。 在足够长的文本中不难发现这样的字符串。 假设the 被加密成 ABC，并在密文中找到三处 ABC，第一第二处相距5，第二第三处相距 20，那么 d 很可能是 5。</p><h4 id="重合指数法">重合指数法</h4><p>对于秘钥长度为 d 的维吉尼亚密码，将密文分割成 d 组，<spanclass="math inline">\(s_x[i] = s[(x + d * i) \mod |s|]\)</span>（密文为s ）<br />每一组可以看作是凯撒加密，因为第 x 组的字符都做了 d[x] 的偏移。<br /></p><p>在有意义的英文文本中，两个字母相同的概率 <spanclass="math inline">\(I = \sum_{i=0}^{25}p_i^2 = 0.065\)</span><br />分别测试 <span class="math inline">\(d&#39; =1,2,3...\)</span>，每次得到 <span class="math inline">\(d&#39;\)</span>个 <span class="math inline">\(I\)</span> 值，离 <spanclass="math inline">\(0.065\)</span> 最近且最小的那组反映出秘钥的长度。在这个过程中实际使用 <span class="math inline">\(I\)</span> 的估计值<span class="math inline">\(I =\sum_{i=0}^{25}\frac{f_i}{d&#39;}\frac{f_i - 1}{d&#39; -1}\)</span>。（原因未知，可能和方差的估计值之类的有关，先挖个坑）</p><p>核心代码如下。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">splitText</span>(<span class="hljs-params">ciphertext, group_num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将 ciphertext 分组</span><br><span class="hljs-string">    :param ciphertext: 密文</span><br><span class="hljs-string">    :param group_num: 组数</span><br><span class="hljs-string">    :return: 分组后的列表 1 * group_num</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    groups = [<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(group_num)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ciphertext)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(group_num):<br>            <span class="hljs-keyword">if</span> i % group_num == j:<br>                groups[j] += ciphertext[i]<br>    <span class="hljs-keyword">return</span> groups<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calFreq</span>(<span class="hljs-params">string</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算 string 各个字符的频数</span><br><span class="hljs-string">    :param string:</span><br><span class="hljs-string">    :return: 频数列表 1 * 26</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    freq = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>)]<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> string:<br>        freq[getIndex(char)] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> freq<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calCI</span>(<span class="hljs-params">freq, length</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算 CI</span><br><span class="hljs-string">    :param freq: 某个分组的频数列表</span><br><span class="hljs-string">    :param length: 某个分组的长度</span><br><span class="hljs-string">    :return: CI 列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    CI = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>        CI += freq[i] / length * (freq[i] - <span class="hljs-number">1</span>) / (length - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> CI<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printCIs</span>(<span class="hljs-params">CIs</span>):<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(CIs)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;d=<span class="hljs-subst">&#123;d&#125;</span>, CI: <span class="hljs-subst">&#123;CIs[d]&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">ciphertext, limit</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param ciphertext:</span><br><span class="hljs-string">    :param limit: 秘钥长度尝试的上限</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 记录频数和CI</span><br>    freqs = [[[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(limit)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(limit)]  <span class="hljs-comment"># d * d * 26</span><br>    CIs = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(limit)]<br><br>    <span class="hljs-comment"># 破解秘钥长度</span><br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, limit):<br>        groups = splitText(ciphertext, d)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d):<br>            freqs[d][i] = calFreq(groups[i])<br><br>        CI = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d):<br>            CI.append(calCI(freqs[d][i], <span class="hljs-built_in">len</span>(ciphertext) // d))<br>        CIs[d] = CI<br><br>    eps = <span class="hljs-number">0.005</span><br>    key_len = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, limit):<br>        avg = <span class="hljs-built_in">sum</span>(CIs[d]) / d  <span class="hljs-comment"># 这里选择用均值看 CI 和 0.065 的接近程度</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(avg - <span class="hljs-number">0.065</span>) &lt; eps:<br>            key_len = d<br>            eps = <span class="hljs-built_in">abs</span>(avg - <span class="hljs-number">0.065</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;key length = <span class="hljs-subst">&#123;key_len&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 得知秘钥长度后，开始破解秘钥内容</span><br>    groups = splitText(ciphertext, key_len)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len):<br>        length = <span class="hljs-built_in">len</span>(groups[i])<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>            freqs[key_len][i][j] /= length  <span class="hljs-comment"># 将频数变成频率</span><br><br>    result = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len)]  <span class="hljs-comment"># 存放秘钥结果</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len):<br>        <span class="hljs-comment"># 秘钥的每一位在对应的组中都和 Caesar 相同</span><br>        I = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>)]<br>        eps = <span class="hljs-number">0.005</span><br>        res = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">26</span>):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>                I[key] += p[i] * freqs[key_len][j][(i + key) % <span class="hljs-number">26</span>] <span class="hljs-comment"># p 为英文字母出现频率的统计表</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(I[key] - <span class="hljs-number">0.065</span>) &lt; eps:<br>                res = key<br>                eps = <span class="hljs-built_in">abs</span>(I[key] - <span class="hljs-number">0.065</span>)<br>        <span class="hljs-comment"># 所有的值偏差都超过 0.005 的话选最接近的那个</span><br>        <span class="hljs-keyword">if</span> res == -<span class="hljs-number">1</span>:<br>            res = I.index(<span class="hljs-built_in">min</span>(I, key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">abs</span>(x - <span class="hljs-number">0.065</span>)))<br>        result[j] = res<br><br>    <span class="hljs-comment"># 把 result 数组转变成 秘钥字符串</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len):<br>        result[i] = shift(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-built_in">int</span>(result[i]))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(result)<br></code></pre></td></tr></table></figure> <ahref="https://github.com/Term-inator/Cipher/blob/main/Vigenere/main.py">完整代码</a></p><h3 id="参考文献">参考文献</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Introduction To ModernCryptography <a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://zhuanlan.zhihu.com/p/111611977">维吉尼亚密码的原理及破解</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://blog.csdn.net/qq_51927659/article/details/116951315">维吉尼亚密码破解</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Cipher</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vigenere</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL shutdown unexpectedly on XAMPP - Plugin &#39;FEEDBACK&#39; is disabled. Server socket created on IP: &#39;::&#39;</title>
    <link href="/2022/09/29/XAMPP-Mysql/"/>
    <url>/2022/09/29/XAMPP-Mysql/</url>
    
    <content type="html"><![CDATA[<h3 id="问题发生时间">问题发生时间</h3><p>2022/09/08</p><h3 id="问题描述">问题描述</h3><p>昨天笔记本电量不足关机，今天打开电脑重启 Xampp的数据库，出现问题，报错如下。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Log">[Note] InnoDB: Mutexes and rw_locks use Windows interlocked functions<br>[Note] InnoDB: Uses event mutexes<br>[Note] InnoDB: Compressed tables use zlib 1.2.11<br>[Note] InnoDB: Number of pools: 1<br>[Note] InnoDB: Using SSE2 crc32 instructions<br>[Note] InnoDB: Initializing buffer pool, total size = 16M, instances = 1, chunk size = 16M<br>[Note] InnoDB: Completed initialization of buffer pool<br>[Note] InnoDB: Starting crash recovery from checkpoint LSN=300288<br>[Note] InnoDB: 128 out of 128 rollback segments are active.<br>[Note] InnoDB: Removed temporary tablespace data file: &quot;ibtmp1&quot;<br>[Note] InnoDB: Creating shared tablespace for temporary tables<br>[Note] InnoDB: Setting file &#x27;D:\Programs\Xampp\mysql\data\ibtmp1&#x27; size to 12 MB. Physically writing the file full; Please wait ...<br>[Note] InnoDB: File &#x27;D:\Programs\Xampp\mysql\data\ibtmp1&#x27; size is now 12 MB.<br>[Note] InnoDB: Waiting for purge to start<br>[Note] InnoDB: 10.4.11 started; log sequence number 300297; transaction id 171<br>[Note] InnoDB: Loading buffer pool(s) from D:\Programs\Xampp\mysql\data\ib_buffer_pool<br>[Note] Plugin &#x27;FEEDBACK&#x27; is disabled.<br>[Note] Server socket created on IP: &#x27;::&#x27;.<br></code></pre></td></tr></table></figure>可能是异常关机导致数据库有些进程异常终止，造成无法再次启动。</p><h3 id="环境">环境</h3><p>OS: Win11<br />XAMPP: 3.2.4</p><h3 id="解决方案">解决方案</h3><ol type="1"><li>复制 /mysql/data，命名为 old-data</li><li>复制 /mysql/backup，命名为 data，backup/相当于是数据库的初始设置</li><li>启动 mysql，正常运行，此时数据库的用户名为 root，密码为 ''</li><li>关闭 mysql，用 old-data/ibdata1 替换 data/ibdata1 中，并将 old-data/中的文件夹（除了 mysql/, performance_schema/, phpmyadmin/ 和test/）复制到 data/ 中</li><li>此时数据迁移已经完成，启动 Apache 和 mysql</li><li>问题解决</li></ol><p>对于之前修改过 root 密码的用户，进入 http://localhost/phpmyadmin/发现报错，因为此时 root 的密码是 ''，所以要修改密码。</p><ol type="1"><li>如图，选择 phpMyAdmin(config.inc.php)，路径Xampp/phpMyAdmin/config.inc.php <imgsrc="/img/2022/09/29/xampp.png" /></li><li>将文件中的 $cfg['Servers'][$i]['password'] 改成 '' <imgsrc="/img/2022/09/29/change_pswd.png" /></li><li>进入 phpMyAdmin，点击“账户”，修改 root localhost 的权限 <imgsrc="/img/2022/09/29/user_account.png" /></li><li>修改密码 <img src="/img/2022/09/29/change_pswd2.png" /></li><li>类似 2, 将文件中的 $cfg['Servers'][$i]['password']改成你的新密码</li><li>完成</li></ol><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://stackoverflow.com/questions/62388844/mysql-shutdown-unexpectedly-on-xampp-server-socket-created-on-ip/68031369#68031369">MySQLshutdown unexpectedly on XAMPP - Server socket created on IP: '::'</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://blog.csdn.net/Quincylk/article/details/50562399">xampp修改mysql数据库密码</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Problems(Solved)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XAMPP</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>凯撒密码</title>
    <link href="/2022/09/20/caesar-cipher/"/>
    <url>/2022/09/20/caesar-cipher/</url>
    
    <content type="html"><![CDATA[<h3 id="凯撒密码">凯撒密码</h3><p>经典的移位密码。<br />定义 <span class="math inline">\(ord()\)</span> 和 <spanclass="math inline">\(chr()\)</span>，<spanclass="math inline">\(ord(&#39;a&#39;) = 97\)</span>, <spanclass="math inline">\(chr(97) = &#39;a&#39;\)</span>。秘钥 <spanclass="math inline">\(K \in \{0, 25\}\)</span> 。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encryption</span>(<span class="hljs-params">S, K</span>):<br>  res = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> S:<br>    res += (<span class="hljs-built_in">ord</span>(c) + K) % <span class="hljs-number">26</span><br>  <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decryption</span>(<span class="hljs-params">S, K</span>):<br>  res = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> S:<br>    res += (<span class="hljs-built_in">ord</span>(c) - K) % <span class="hljs-number">26</span><br>  <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></p><h3 id="破解方法">破解方法</h3><h4 id="暴力">暴力</h4><p>因为 <span class="math inline">\(|K| = 26\)</span>，所以枚举 26次就能得到有意义的明文。</p><h4 id="统计">统计</h4><p>因为凯撒密码不是概率加密，即同一个字符每一次加密的结果都是一样的，所以密文和明文的字母概率分布是相同的，所以对于有意义的文本，可以通过统计字母出现的频率，如下图，猜测出秘钥K。 <img src="/img/2022/09/20/frequency.png"alt="英文文本中字母的平均频率[1]" /> 不难算出 <spanclass="math display">\[\sum_{i=0}^{25} p_i^2 \approx 0.065\]</span> 令 <span class="math inline">\(q_i\)</span> 表示第 <spanclass="math inline">\(i\)</span> 个字符在密文中出现的频率（A 是第 <spanclass="math inline">\(0\)</span> 个字符）。对于秘钥 <spanclass="math inline">\(k \in {0, .., 25}\)</span>， <spanclass="math display">\[I_k = \sum_{i=0}^{25} p_i * q_{(i+k) \mod 26} \approx 0.065\]</span> 核心代码如下。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python">p = &#123;<br>  <span class="hljs-number">0</span>: <span class="hljs-number">0.082</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-number">0.015</span>,<br>  <span class="hljs-number">2</span>: <span class="hljs-number">0.028</span>,<br>  <span class="hljs-number">3</span>: <span class="hljs-number">0.042</span>,<br>  <span class="hljs-number">4</span>: <span class="hljs-number">0.127</span>,<br>  <span class="hljs-number">5</span>: <span class="hljs-number">0.022</span>,<br>  <span class="hljs-number">6</span>: <span class="hljs-number">0.020</span>,<br>  <span class="hljs-number">7</span>: <span class="hljs-number">0.061</span>,<br>  <span class="hljs-number">8</span>: <span class="hljs-number">0.070</span>,<br>  <span class="hljs-number">9</span>: <span class="hljs-number">0.001</span>,<br>  <span class="hljs-number">10</span>: <span class="hljs-number">0.008</span>,<br>  <span class="hljs-number">11</span>: <span class="hljs-number">0.040</span>,<br>  <span class="hljs-number">12</span>: <span class="hljs-number">0.024</span>,<br>  <span class="hljs-number">13</span>: <span class="hljs-number">0.067</span>,<br>  <span class="hljs-number">14</span>: <span class="hljs-number">0.075</span>,<br>  <span class="hljs-number">15</span>: <span class="hljs-number">0.019</span>,<br>  <span class="hljs-number">16</span>: <span class="hljs-number">0.001</span>,<br>  <span class="hljs-number">17</span>: <span class="hljs-number">0.060</span>,<br>  <span class="hljs-number">18</span>: <span class="hljs-number">0.063</span>,<br>  <span class="hljs-number">19</span>: <span class="hljs-number">0.090</span>,<br>  <span class="hljs-number">20</span>: <span class="hljs-number">0.028</span>,<br>  <span class="hljs-number">21</span>: <span class="hljs-number">0.010</span>,<br>  <span class="hljs-number">22</span>: <span class="hljs-number">0.024</span>,<br>  <span class="hljs-number">23</span>: <span class="hljs-number">0.020</span>,<br>  <span class="hljs-number">24</span>: <span class="hljs-number">0.001</span>,<br>  <span class="hljs-number">25</span>: <span class="hljs-number">0.001</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">ciphertext</span>):<br>  n = <span class="hljs-built_in">len</span>(ciphertext)<br>  I = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>)]<br>  freq = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>)]<br>  <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> ciphertext:<br>    freq[getIndex(char)] += <span class="hljs-number">1</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>    freq[i] /= n<br><br>  eps = <span class="hljs-number">0.005</span><br>  res = -<span class="hljs-number">1</span><br>  <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">26</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>      I[key] += p[i] * freq[(i + key) % <span class="hljs-number">26</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(I[key] - <span class="hljs-number">0.065</span>) &lt; eps:<br>      res = key<br>      eps = <span class="hljs-built_in">abs</span>(I[key] - <span class="hljs-number">0.065</span>)<br>  <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure> <ahref="https://github.com/Term-inator/Cipher/blob/main/Caesar/main.py">完整代码</a></p><h3 id="参考文献">参考文献</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Introduction To ModernCryptography <a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Cipher</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Caesar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小表示法</title>
    <link href="/2022/08/08/minimum-representation/"/>
    <url>/2022/08/08/minimum-representation/</url>
    
    <content type="html"><![CDATA[<h3 id="循环同构">循环同构</h3><p>对于字符串 <span class="math inline">\(S,\ S.length = n,\\ \forall \i, \ S[i..n] + S[0..i-1]\)</span> 与 <spanclass="math inline">\(S\)</span> 循环同构。</p><h3 id="最小表示">最小表示</h3><p>字符串 <span class="math inline">\(S\)</span>的循环同构中字典序最小的字符串</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">minimumRepresentation</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">len</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">i</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">j</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span> = s.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">while</span> (len &lt; n &amp;&amp; i &lt; n &amp;&amp; j &lt; n) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span> = s[(i + len) % n]<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">b</span>: <span class="hljs-built_in">string</span> = s[(j + len) % n]<br>    <span class="hljs-keyword">if</span> (a == b) &#123;<br>      ++len<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>        ++i<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        ++j<br>      &#125;<br>      len = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">if</span> (i == j) &#123;<br>        ++i<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(i, j)<br>&#125;<br></code></pre></td></tr></table></figure><p>算法时间复杂度最好情况 <spanclass="math inline">\(O(n)\)</span>，最坏 <spanclass="math inline">\(O(n^2)\)</span><br />对于形如 <span class="math inline">\(s = yyy...yyx,\ s.length =n\)</span> 的数据，复杂度为 <spanclass="math inline">\(O(n^2)\)</span>。</p><h3 id="优化">优化</h3><p>对于长为 <span class="math inline">\(n\)</span> 的字符串 <spanclass="math inline">\(S\)</span> 的两个循环同构 <spanclass="math inline">\(S_i,\ S_j\ (i &lt; j)\)</span>, 易知 <spanclass="math inline">\(S_i,\ S_j\)</span> 是 <spanclass="math inline">\(2S = S + S\)</span> 的子字符串。假设它们的前 <spanclass="math inline">\(l\ (l &lt; n)\)</span> 个字符相同，即 <spanclass="math inline">\(S[i..i+l-1] = S[j..j+l-1]\)</span></p><p>如果它们的下一个字符 <span class="math inline">\(S[i+l] \not= S[j +l]\)</span>，不妨设 <span class="math inline">\(S[i+l] &lt;S[j+l]\)</span> 时，那么对 <span class="math inline">\(\forall k \in [0,l]\)</span>，<span class="math inline">\(S_{i+k} &lt;S_{j+k}\)</span></p><p><strong>证明</strong><br /><span class="math inline">\(S_{i+k} = S[i..i+l-1] + S[i+l] +S[i+l+1...]\)</span><br /><span class="math inline">\(S_{j+k} = S[j..j+l-1] + S[j+l] +S[j+l+1...]\)</span><br /><span class="math inline">\(\because S[i..i+l-1] = S[j..j+l-1],\ S[i+l]&lt; S[j+l]\)</span><br /><span class="math inline">\(\therefore S_{i+k} &lt; S_{j+k}\)</span></p><p><span class="math inline">\(S[i+l] &gt; S[j+l]\)</span>的情况类似。<br />所以 <span class="math inline">\(j\)</span> 可以跳过下标 <spanclass="math inline">\([j, j+l]\)</span>，直接去比较 <spanclass="math inline">\(S[i] 和 S[j+l+1]\)</span></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">minimumRepresentation</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">len</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">i</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">j</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span> = s.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">while</span> (len &lt; n &amp;&amp; i &lt; n &amp;&amp; j &lt; n) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span> = s[(i + len) % n]<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">b</span>: <span class="hljs-built_in">string</span> = s[(j + len) % n]<br>    <span class="hljs-keyword">if</span> (a == b) &#123;<br>      ++len<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>        i = i + len + <span class="hljs-number">1</span><br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        j = j + len + <span class="hljs-number">1</span><br>      &#125;<br>      len = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">if</span> (i == j) &#123;<br>        ++i<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(i, j)<br>&#125;<br></code></pre></td></tr></table></figure><p>此时时间复杂度稳定在 <span class="math inline">\(O(n)\)</span>。</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>899. 有序队列</title>
    <link href="/2022/08/04/899-Orderly-Queue/"/>
    <url>/2022/08/04/899-Orderly-Queue/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/orderly-queue/">传送门</a></p><h3 id="思路">思路</h3><p>这是一道看似 Hard，实则想出方法就 Easy 的题。<br />当 <span class="math inline">\(k = 1\)</span>时，变成找字典序最小的循环子串问题。<br />当 <span class="math inline">\(k &gt; 1\)</span>时，经过任意步移动一定可以将字符串 <spanclass="math inline">\(S\)</span> 变成升序字符串。</p><p><strong>证明</strong><br />当 <span class="math inline">\(k = 2\)</span>时，类比插入排序，可以假装将 <span class="math inline">\(S[0]\)</span>拿出，不停地将 <span class="math inline">\(S[1]\)</span>移动到字符串末尾，就好像字符串在旋转。转到合适的位置时，将 <spanclass="math inline">\(s[0]\)</span>插入字符串。经过若干次操作后，就能对字符串完成排序。 <pre><code class=" mermaid">flowchart LR01 --&gt; n-1n-1 --&gt; n-2n-2 -..-&gt; 33 --&gt; 22 --&gt; 1</code></pre></p><h3 id="实现">实现</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">orderlyQueue</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span>, k: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">if</span>(s.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> s<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">res</span>: <span class="hljs-built_in">string</span> = s<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; ++i) &#123;<br>            s = s.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>) + s[<span class="hljs-number">0</span>]<br>            res = res &lt; s ? res : s<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(s).<span class="hljs-title function_">sort</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><span class="math inline">\(k = 1\)</span> 时，时间复杂度为 <spanclass="math inline">\(O(n^2)\)</span>，<br /><span class="math inline">\(k &gt; 1\)</span> 时，时间复杂度为 <spanclass="math inline">\(O(n \log n)\)</span></p><h3 id="k-1-情况的优化"><span class="math inline">\(k = 1\)</span>情况的优化</h3><p><span class="math inline">\(k = 1\)</span> 其实就是求字符串的<ahref="https://term-inator.github.io/2022/08/08/minimum-representation/">最小表示</a>，可以将时间复杂度优化到<span class="math inline">\(O(n)\)</span>。 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">minimumRepresentation</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">len</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">i</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">j</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span> = s.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">while</span> (len &lt; n &amp;&amp; i &lt; n &amp;&amp; j &lt; n) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span> = s[(i + len) % n]<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">b</span>: <span class="hljs-built_in">string</span> = s[(j + len) % n]<br>    <span class="hljs-keyword">if</span> (a == b) &#123;<br>      ++len<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>        i = i + len + <span class="hljs-number">1</span><br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        j = j + len + <span class="hljs-number">1</span><br>      &#125;<br>      len = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">if</span> (i == j) &#123;<br>        ++i<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(i, j)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">orderlyQueue</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span>, k: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">if</span>(s.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> s<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">const</span> index = <span class="hljs-title function_">minimumRepresentation</span>(s)<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">substring</span>(index) + s.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, index)<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> [...s].<span class="hljs-title function_">sort</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Hard</tag>
      
      <tag>最小表示法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Style Transfer</title>
    <link href="/2022/08/01/style-transfer/"/>
    <url>/2022/08/01/style-transfer/</url>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin: auto;}.img-table {  margin-bottom: 0 !important;}.img-table-caption {  font-size: 0.8rem ;  color: #fefefe;  opacity: 0.65;  line-height: 1;  margin: -0.75rem auto 2rem;  text-align: center;  cursor: text;}</style><h3 id="摘要">摘要</h3><p>近几年风格迁移出现了各种各样的实现方案。本文是数字图像课程的期末项目报告，同时也作为课程项目的数字图像处理系统的一个功能。本文的模型改进了课程提供的代码，从将vgg16 改成 vgg19，ResidualBlock 改成 ResNextBlock，mse loss 改成 gram三个角度改进模型，使其在小数据集上的效果超过原模型。同时使用的不同种类的风格图和内容图进行迁移，比较效果。另外，本文还进行了消融实验，探究了改进的这三个部分在风格迁移起了什么作用。</p><p><strong>关键字:</strong> 风格迁移，卷积神经网络</p><h3 id="介绍">介绍</h3><p>风格迁移是一个出现了很久的问题，它研究一个将一张图片的风格应用到另一张图片上的问题。从问题提出到现在，大量研究者提出了各种各样的模型和解决方法。比如，RethinkingStyle Transfer: From Pixels to ParameterizedBrushstrokes<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="D. Kotovenko, M. Wright, A. Heimbrecht, and B. Ommer, “Rethinking style transfer: From pixels to parameterized brushstrokes,” CVPR, 2021.">[1]</span></a></sup>中提出需要将笔触考虑在内，能更好地还原风格图像的风格。StyleGAN3<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="T. Karras, M. Aittala, S. Laine, E. Härkönen, J. Hellsten, J. Lehtinen, and T. Aila, “Alias-free generative adversarial networks,” in Proc. NeurIPS, 2021.">[2]</span></a></sup>则更加强大，可以实现表情、年龄、性别、肤色等等的风格迁移。DALL-E2<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="A. Ramesh, P. Dhariwal, A. Nichol, C. Chu, and M. Chen, “Hierarchical text-conditional image generation with clip latents,” arXiv preprint arXiv:2204.06125, 2022.">[3]</span></a></sup>更为惊艳，基于 CLIP实现了将文字转换成图片的功能。用文字对场景进行描述即可生成一张符合描述的图片，用文字描述一种风格来完成类似风格迁移的功能也非常令人惊喜。</p><p>本文是数字图像课程的期末项目报告，不涉及这些前沿的研究，主要对提供的论文和代码进行改进<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[StyleTransferTrilogy](https://github.com/CortexFoundation/StyleTransferTrilogy)">[4]</span></a></sup>。本文涉及到的训练均在笔记本cpu 上完成，因此后文提到的训练时间都特指在这个 cpu 上训练的时间。</p><h3 id="相关工作">相关工作</h3><p>在 A neural algorithm of artistic style<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="L. A. Gatys, A. S. Ecker, and M. Bethge, “A neural algorithm of artistic style,” arXiv preprint arXiv:1508.06576, 2015.">[5]</span></a></sup>中，提出用图像识别的思路提取内容图和风格图的特征，使用 Gram 矩阵求风格的 loss。Gram 矩阵是对 feature map做内积，就好像是高维空间的两个向量，向量之间的夹角 <spanclass="math inline">\(\theta\)</span> 越小，这两个向量就越相似，感觉类似Word Embedding。总的 loss 是内容的 loss 和风格的 loss 的和，当这个 loss变小，说明生成的图片和内容图、风格图都有相似之处，达成风格迁移的目标。但由于这个做法没有训练出模型，所以当内容图或风格图发生改变时，都要重新进行训练，生成一张图片要近30分钟，速度过于缓慢。将这样的算法嵌入期末项目的系统中显然是不合适的。</p><p>Perceptual losses for real-time style transfer and super-resolution<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="J. Johnson, A. Alahi, and L. Fei-Fei, “Perceptual losses for real-time style transfer and super resolution,” in European conference on computer vision. Springer, 2016, pp. 694–711.">[6]</span></a></sup>提出了一种固定风格任意内容的风格迁移方法。通过在 COCO2014 上训练TransformNet，得到某个风格图对应的模型。将这个模型应用在任意的内容图上都可以得到对应的迁移图像。然而，如果想要换一个风格，就要重新训练一个模型。如果想要实现用户上传两张图片，进行风格迁移的操作的话，这样的算法是不能满足需求的。对于用户上传的风格图，系统不知道该用哪一个模型进行风格迁移。因此，这个方法也是不合适的。</p><p>Meta networks for neural style transfer<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="F. Shen, S. Yan, and G. Zeng, “Meta networks for neural style transfer,” arXiv preprint arXiv:1709.04111, 2017.">[7]</span></a></sup>提出了任意风格任意内容的风格迁移方法。通过在 COCO2014 和 WikiArt上训练一个 MetaNet，然后将训练出来的权值赋给TransformNet，完成风格迁移。在训练的过程中，每次迭代都将 MetaNet训练得到的权值赋值给 TransformNet，然后用 TransformNet对图像进行操作，得到转换后的图像。用这个图像和内容图、风格图比较，求出内容loss 和风格loss。这个方法是满足系统的需求的，因此本文对这个模型进行改进。本文中，这篇文章中提出的模型称作原模型，本文的模型称作改进模型。改进的方向是在数据集比较小的情况下，如何让这个模型的表现超过原来的模型。</p><h3 id="改进方法">改进方法</h3><p>由于论文使用数据集非常大，COCO2014 有 82783 张内容图，WikiArt 中也有79433 张风格图。另外，目前设备的 GPU 显存只有2G，运行论文的代码会爆显存，所以只能在 cpu上训练。但是直接运行代码发现一个 epoch 就要 80 小时左右， 22个 epoch也就是 73 天，这显然是不能接受的。所以本文从内容、风格数据集中分别提取出500 张和 1000 张图片进行训练，缩短训练时间。每次取图片的 seed 均为42。本文“大小为 500 的数据集”指内容图 500 张和风格图 500 张。“大小为1000 的数据集”指内容图 1000 张和风格图 1000 张。</p><h4 id="替换-backbone">替换 backbone</h4><p>原来的网络中使用的是 vgg16 来提取图像特征，所以想到改用 vgg19。原先模型使用的是 vgg16 的 3, 8, 5, 22 层，根据图 <ahref="#fig:vgg">vgg</a>，这些层都是 maxpooling 的前一层。所以换成 vgg19后，应该相应地使用 3, 8, 17, 26 层。 <img src="/img/2022/08/01/vgg.png"id="fig:vgg" alt="vgg[8]" /></p><h4 id="替换-residual-block">替换 residual block</h4><p>根据图 <a href="#fig:transform_net">transform net</a>，原来的TransformNet 在上采样和下采样之间有 5 个 ResidualBlock，所以想到 ResNet的升级版ResNeXt<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="S. Xie, R. Girshick, P. Dollár, Z. Tu, and K. He, “Aggregated residual transformations for deep neural networks,” in Proceedings of the IEEE conference on computer vision and pattern recognition, 2017, pp. 1492–1500.">[9]</span></a></sup>，用一个ResNeXtBlock 代替原来的ResidualBlock。ResNeXtBlock的入通道和出通道保持相同，内部有 32 个相同的分支。没有采用 5 个ResNeXtBlock 的原因是这样的结构非常消耗计算资源，一个 ResNextBlock带来的时间开销已经大幅超过了 5 个 ResidualBlock。原先的模型训练 1 个epoch 只需要约 25 分钟，修改后的模型则需要约 35 分钟。</p><p>这也是合理的，相当于用 32 个分支代替了 5个串行的结构，训练量增加了。但本文没有将 ResNextBlock 所有的参数都传入TransformNet 中，中间 32 个分支的参数没有存入 TransformNet，因为这些分支参数量相当大，没有必要放入TransformNet，而且放入的话内存不够，所以舍弃。 <imgsrc="/img/2022/08/01/transform_net.png" id="fig:transform_net"alt="transform net[7]" /></p><h4 id="替换-style-loss">替换 style loss</h4><p>Gram 矩阵适合用来比较图像的相似度，所以这里用 Gram矩阵代替原来训练用的 MSE loss。由于修改了 loss 计算方法，所以 style loss的 weight 也需要做调整。为了让 style loss 和 content loss的值相近，weight 选择 3e5。</p><h3 id="实验结果">实验结果</h3><strong>训练时间显著增长。</strong> 表<ahref="#tab:training_time">训练时间</a>展示的是两个模型大致的训练时间。<a name="tab:training_time"></a><div class="center"><center>训练时间</center><table><th><td>原模型</td><td>改进模型</td></th><tr><td>500</td><td>22min</td><td>50min</td></tr><tr><td>1000</td><td>35min</td><td>80min</td></tr></table></div><p>可以看出数据集翻倍后，训练花费的时间近似于翻倍。改进模型花费的时间约为原模型的1.6倍。相应的，用模型进行风格迁移的时间也变长了。由于原模型风格迁移的过程是先指定风格图片，训练20 个 batch，得到一个类似 Perceptual losses for real-time style transferand super-resolution<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="J. Johnson, A. Alahi, and L. Fei-Fei, “Perceptual losses for real-time style transfer and super resolution,” in European conference on computer vision. Springer, 2016, pp. 694–711.">[6]</span></a></sup>中的固定风格任意内容的风格迁移模型，然后将该模型应用到大量图片上，所以风格迁移的时间是20 个 batch 的训练时间（较长）+转换时间（与图片数量有关）。因此这里比较的是转换一张图的时间，近似认为是20 个 batch 的训练时间。原模型大约是 8-10 分钟，改进模型大约是 12-14分钟。</p><p><strong>模型文件缩小。</strong> 由于改进模型只保存了 ResNeXtBlock的两层，相比于原模型的五层ResidualBlock，模型文件大幅缩小。原模型的两个模型文件约为850MB，改进模型的两个模型文件约为 647 MB，约为原模型的 <spanclass="math inline">\(\frac{3}{4}\)</span>。</p><p><strong>小数据集。</strong> 相比于原模型的 80K的训练，改进模型的训练集仅为 <spanclass="math inline">\(\frac{1}{160}\)</span> 和 <spanclass="math inline">\(\frac{1}{80}\)</span>，大幅减少了训练时间，并且二者在大小为500 和 1000的数据集上训练后，进行风格迁移的效果差不多，甚至改进模型更好，见<ahref="#app:comparison">附录</a>。</p><p>选择的<a href="#fig:style">风格图</a>色调上包含红、黄、绿、蓝、黑、白等常见的颜色，内容上包含人像、自然景物、建筑等，绘画流派上包含了抽象派、印象派等。依次为18993，29052，30925，78717，mosaic，带珍珠耳环的少女，picasso，星月夜。前四个是COCO2014 中的编号。后文以这些名称指代这些风格图。 选择的<ahref="#fig:content">内容图</a>主要为人像、动物、建筑、景物和文字，其中两张是黑白图。 另外，在这 8张风格图和 8 张内容图中，各有一半不在训练集中。</p><a name="fig:style"></a><table class="img-table"><tr><td><img src="/img/2022/08/01/18993.png"/></td><td><img src="/img/2022/08/01/29052.png"/></td><td><img src="/img/2022/08/01/30925.png"/></td><td><img src="/img/2022/08/01/78717.png"/></td></tr></table><center><a class="img-table-caption">数据集内的风格图</a></center><table class="img-table"><tr><td><img src="/img/2022/08/01/mosaic.png"/></td><td><img src="/img/2022/08/01/pearl.png"/></td><td><img src="/img/2022/08/01/picasso.png"/></td><td><img src="/img/2022/08/01/star.png"/></td></tr></table><center><a class="img-table-caption">数据集外的风格图</a></center><center><a class="img-table-caption">风格图</a></center><br /><a name="fig:content"></a><table class="img-table"><tr><td><img src="/img/2022/08/01/content_0.png"/></td></tr></table><center><a class="img-table-caption">数据集内的内容图</a></center><table class="img-table"><tr><td><img src="/img/2022/08/01/content_1.png"/></td></tr></table><center><a class="img-table-caption">数据集外的内容图</a></center><center><a class="img-table-caption">内容图</a></center><p><br />从附录的图中可以看出，原模型的迁移结果有许多斑点，仿佛绘画的时候颜料撒了，在画布上晕染开来，而且色块颜色和其他地方非常不协调。而改进模型没有这个问题。 尤其是在大小 500的数据集上训练的改进模型，整体颜色都比较协调。 在大小 1000的数据集上训练的改进模型虽然也有一些突出的色块，但色块的颜色不突兀，出现的位置相比原模型也更合理，都是一些原图明亮的、偏白色的位置。 但目前并不清楚为什么数据集变大了会出现这样的现象。</p><p><strong>权值不停增大的问题依然存在。</strong> 由于没有在 80K的数据集上训练，所以无法得出解决权值不停增大的结论。 图 <ahref="#fig:weight">权值</a> 显示 transform_net.downsampling.1.weight 的权值。可以看出改进模型权值上升的趋势明显，至少在大小 500 和 1000上权值在不停增大，而不是稳定在一个区间内。另外，改进模型权值的上升速度比原模型快，相同的迭代次数下，改进模型的权值普遍比原模型高，这可能也是改进模型效果更好的原因。</p><a name="fig:weight"></a><table class="img-table"><tr><td><img src="/img/2022/08/01/weight_000_500.png"/></td><td><img src="/img/2022/08/01/weight_000_1000.png"/></td></tr><tr><td><img src="/img/2022/08/01/weight_111_500.png"/></td><td><img src="/img/2022/08/01/weight_111_1000.png"/></td></tr><tr></table><center><a class="img-table-caption">模型权值</a></center><p><br />由于改进模型修改了原模型的三个地方，所以本文做了消融实验探究各个地方的改进分别对风格迁移起了什么作用，见<a href="#app:ablation">附录</a>。这部分的实验都是在大小为 500 的数据集上进行。</p><p>从图中可以看出，vgg16+resnext+gram 处理白色的效果不好。虽然在大小为1000的数据集上训练的改进模型在原图明亮的位置也用了和周围不同的颜色，但饱和度低，和周围的颜色是相近、协调的。而vgg16+resnext+gram的版本用了饱和度很高、鲜艳的颜色代替原图中明亮的位置，非常突兀。vgg19+resnet+gram处理黑色的效果不好。在原图黑色或偏暗的位置出现了饱和度很高的颜色，如红色、绿色、白色，并且这些颜色出现的位置不连续。vgg19+resnext+mse处理阴影的效果不好。在人物影子、水面倒影、云层阴影的位置都用了和周围相差很大、不协调、饱和度很低的颜色。</p><p>所以推测 vgg19 能更好地理解图像，能更正确地按语义分割图像，从而在合适的位置替换合适的颜色。resnext 和 gram 则是优化了黑色和阴影的转换，是图像的颜色更协调、线条更平滑。</p><h3 id="总结">总结</h3><p>本文通过分析三种风格迁移的方案，根据方案的可拓展性和运行时间确定可以在数字图像处理系统中应用的方案，并对该方案的模型进行改进。本文从将vgg16 改成 vgg19，ResidualBlock 改成 ResNextBlock，mse loss 改成 gram三个角度改进模型，使其在小数据集上的效果超过原模型。同时使用的不同种类的风格图和内容图进行迁移，比较效果。可以看出改进模型的风格迁移效果要优于原模型，但代价是更多的训练时间和迁移时间。</p><p>本文还进行了消融实验，探究了改进的这三个部分在风格迁移中起了什么作用，得出修改的每一部分对模型的效果都起到了作用。遗憾的一点是受制于设备，无法让其在80K的数据集上进行训练，所以也无法得知在大数据集上，改进模型的效果是否优于原模型。而且，即使在《18993》，《29052》，《78717》，《星月夜》等风格图上取得了不错的效果，但在转换一些特定的图片上，模型的效果并不好。比如《30925》或《戴珍珠耳环的少女》。这两张图都有占比较少的、使画面丰富的颜色，如亮绿色和淡蓝色。可以看出原模型尝试在图像中引入这些颜色，虽然这些颜色出现的位置非常奇怪。但改进模型迁移的结果中完全没有这些颜色，取而代之的是占据大部分画面的黄色和黑色。虽然改进模型的结果更自然，但很难让人从迁移结果中联想出风格图的内容。</p><p>另外，原模型和改进模型都有图像不清晰的问题。因此模型还有许多地方有待改进，但受制于时间等因素，本文没能继续进行改进。</p><h3 id="a-效果对比">A 效果对比</h3><p><a name="app:comparison"></a></p><details><summary>18993</summary><table><tr><td>原模型 500</td><td><img src="/img/2022/08/01/comparison/18993_000_500_0.png"/></td><td><img src="/img/2022/08/01/18993.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/18993_000_500_1.png"/></td><td></td></tr><tr><td>原模型 1000</td><td><img src="/img/2022/08/01/comparison/18993_000_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/18993_000_1000_1.png"/></td><td></td></tr><tr><td>改进模型 500</td><td><img src="/img/2022/08/01/comparison/18993_111_500_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/18993_111_500_1.png"/></td><td></td></tr><tr><td>改进模型 1000</td><td><img src="/img/2022/08/01/comparison/18993_111_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/18993_111_1000_1.png"/></td><td></td></tr></table></details><details><summary>29052</summary><table><tr><td>原模型 500</td><td><img src="/img/2022/08/01/comparison/29052_000_500_0.png"/></td><td><img src="/img/2022/08/01/29052.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/29052_000_500_1.png"/></td><td></td></tr><tr><td>原模型 1000</td><td><img src="/img/2022/08/01/comparison/29052_000_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/29052_000_1000_1.png"/></td><td></td></tr><tr><td>改进模型 500</td><td><img src="/img/2022/08/01/comparison/29052_111_500_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/29052_111_500_1.png"/></td><td></td></tr><tr><td>改进模型 1000</td><td><img src="/img/2022/08/01/comparison/29052_111_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/29052_111_1000_1.png"/></td><td></td></tr></table></details><details><summary>30925</summary><table><tr><td>原模型 500</td><td><img src="/img/2022/08/01/comparison/30925_000_500_0.png"/></td><td><img src="/img/2022/08/01/30925.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/30925_000_500_1.png"/></td><td></td></tr><tr><td>原模型 1000</td><td><img src="/img/2022/08/01/comparison/30925_000_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/30925_000_1000_1.png"/></td><td></td></tr><tr><td>改进模型 500</td><td><img src="/img/2022/08/01/comparison/30925_111_500_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/30925_111_500_1.png"/></td><td></td></tr><tr><td>改进模型 1000</td><td><img src="/img/2022/08/01/comparison/30925_111_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/30925_111_1000_1.png"/></td><td></td></tr></table></details><details><summary>78717</summary><table><tr><td>原模型 500</td><td><img src="/img/2022/08/01/comparison/78717_000_500_0.png"/></td><td><img src="/img/2022/08/01/78717.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/78717_000_500_1.png"/></td><td></td></tr><tr><td>原模型 1000</td><td><img src="/img/2022/08/01/comparison/78717_000_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/78717_000_1000_1.png"/></td><td></td></tr><tr><td>改进模型 500</td><td><img src="/img/2022/08/01/comparison/78717_111_500_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/78717_111_500_1.png"/></td><td></td></tr><tr><td>改进模型 1000</td><td><img src="/img/2022/08/01/comparison/78717_111_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/78717_111_1000_1.png"/></td><td></td></tr></table></details><details><summary>mosaic</summary><table><tr><td>原模型 500</td><td><img src="/img/2022/08/01/comparison/mosaic_000_500_0.png"/></td><td><img src="/img/2022/08/01/mosaic.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/mosaic_000_500_1.png"/></td><td></td></tr><tr><td>原模型 1000</td><td><img src="/img/2022/08/01/comparison/mosaic_000_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/mosaic_000_1000_1.png"/></td><td></td></tr><tr><td>改进模型 500</td><td><img src="/img/2022/08/01/comparison/mosaic_111_500_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/mosaic_111_500_1.png"/></td><td></td></tr><tr><td>改进模型 1000</td><td><img src="/img/2022/08/01/comparison/mosaic_111_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/mosaic_111_1000_1.png"/></td><td></td></tr></table></details><details><summary>pearl</summary><table><tr><td>原模型 500</td><td><img src="/img/2022/08/01/comparison/pearl_000_500_0.png"/></td><td><img src="/img/2022/08/01/pearl.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/pearl_000_500_1.png"/></td><td></td></tr><tr><td>原模型 1000</td><td><img src="/img/2022/08/01/comparison/pearl_000_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/pearl_000_1000_1.png"/></td><td></td></tr><tr><td>改进模型 500</td><td><img src="/img/2022/08/01/comparison/pearl_111_500_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/pearl_111_500_1.png"/></td><td></td></tr><tr><td>改进模型 1000</td><td><img src="/img/2022/08/01/comparison/pearl_111_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/pearl_111_1000_1.png"/></td><td></td></tr></table></details><details><summary>picasso</summary><table><tr><td>原模型 500</td><td><img src="/img/2022/08/01/comparison/picasso_000_500_0.png"/></td><td><img src="/img/2022/08/01/picasso.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/picasso_000_500_1.png"/></td><td></td></tr><tr><td>原模型 1000</td><td><img src="/img/2022/08/01/comparison/picasso_000_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/picasso_000_1000_1.png"/></td><td></td></tr><tr><td>改进模型 500</td><td><img src="/img/2022/08/01/comparison/picasso_111_500_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/picasso_111_500_1.png"/></td><td></td></tr><tr><td>改进模型 1000</td><td><img src="/img/2022/08/01/comparison/picasso_111_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/picasso_111_1000_1.png"/></td><td></td></tr></table></details><details><summary>star</summary><table><tr><td>原模型 500</td><td><img src="/img/2022/08/01/comparison/star_000_500_0.png"/></td><td><img src="/img/2022/08/01/star.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/star_000_500_1.png"/></td><td></td></tr><tr><td>原模型 1000</td><td><img src="/img/2022/08/01/comparison/star_000_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/star_000_1000_1.png"/></td><td></td></tr><tr><td>改进模型 500</td><td><img src="/img/2022/08/01/comparison/star_111_500_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/star_111_500_1.png"/></td><td></td></tr><tr><td>改进模型 1000</td><td><img src="/img/2022/08/01/comparison/star_111_1000_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/comparison/star_111_1000_1.png"/></td><td></td></tr></table></details><h3 id="b-消融实验结果">B 消融实验结果</h3><p><a name="app:ablation"></a></p><details><summary>18993</summary><table><tr><td>改进模型 vgg19 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_18993_111_0.png"/></td><td><img src="/img/2022/08/01/18993.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_18993_111_1.png"/></td><td></td></tr><tr><td>vgg16 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_18993_011_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_18993_011_1.png"/></td><td></td></tr><tr><td>vgg19 resnet gram</td><td><img src="/img/2022/08/01/ablation/abl_18993_101_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_18993_101_1.png"/></td><td></td></tr><tr><td>vgg19 resnext mse</td><td><img src="/img/2022/08/01/ablation/abl_18993_110_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_18993_110_1.png"/></td><td></td></tr></table></details><details><summary>29052</summary><table><tr><td>改进模型 vgg19 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_29052_111_0.png"/></td><td><img src="/img/2022/08/01/29052.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_29052_111_1.png"/></td><td></td></tr><tr><td>vgg16 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_29052_011_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_29052_011_1.png"/></td><td></td></tr><tr><td>vgg19 resnet gram</td><td><img src="/img/2022/08/01/ablation/abl_29052_101_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_29052_101_1.png"/></td><td></td></tr><tr><td>vgg19 resnext mse</td><td><img src="/img/2022/08/01/ablation/abl_29052_110_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_29052_110_1.png"/></td><td></td></tr></table></details><details><summary>30925</summary><table><tr><td>改进模型 vgg19 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_30925_111_0.png"/></td><td><img src="/img/2022/08/01/30925.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_30925_111_1.png"/></td><td></td></tr><tr><td>vgg16 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_30925_011_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_30925_011_1.png"/></td><td></td></tr><tr><td>vgg19 resnet gram</td><td><img src="/img/2022/08/01/ablation/abl_30925_101_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_30925_101_1.png"/></td><td></td></tr><tr><td>vgg19 resnext mse</td><td><img src="/img/2022/08/01/ablation/abl_30925_110_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_30925_110_1.png"/></td><td></td></tr></table></details><details><summary>78717</summary><table><tr><td>改进模型 vgg19 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_78717_111_0.png"/></td><td><img src="/img/2022/08/01/78717.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_78717_111_1.png"/></td><td></td></tr><tr><td>vgg16 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_78717_011_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_78717_011_1.png"/></td><td></td></tr><tr><td>vgg19 resnet gram</td><td><img src="/img/2022/08/01/ablation/abl_78717_101_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_78717_101_1.png"/></td><td></td></tr><tr><td>vgg19 resnext mse</td><td><img src="/img/2022/08/01/ablation/abl_78717_110_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_78717_110_1.png"/></td><td></td></tr></table></details><details><summary>mosaic</summary><table><tr><td>改进模型 vgg19 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_mosaic_111_0.png"/></td><td><img src="/img/2022/08/01/mosaic.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_mosaic_111_1.png"/></td><td></td></tr><tr><td>vgg16 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_mosaic_011_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_mosaic_011_1.png"/></td><td></td></tr><tr><td>vgg19 resnet gram</td><td><img src="/img/2022/08/01/ablation/abl_mosaic_101_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_mosaic_101_1.png"/></td><td></td></tr><tr><td>vgg19 resnext mse</td><td><img src="/img/2022/08/01/ablation/abl_mosaic_110_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_mosaic_110_1.png"/></td><td></td></tr></table></details><details><summary>pearl</summary><table><tr><td>改进模型 vgg19 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_pearl_111_0.png"/></td><td><img src="/img/2022/08/01/pearl.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_pearl_111_1.png"/></td><td></td></tr><tr><td>vgg16 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_pearl_011_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_pearl_011_1.png"/></td><td></td></tr><tr><td>vgg19 resnet gram</td><td><img src="/img/2022/08/01/ablation/abl_pearl_101_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_pearl_101_1.png"/></td><td></td></tr><tr><td>vgg19 resnext mse</td><td><img src="/img/2022/08/01/ablation/abl_pearl_110_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_pearl_110_1.png"/></td><td></td></tr></table></details><details><summary>picasso</summary><table><tr><td>改进模型 vgg19 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_picasso_111_0.png"/></td><td><img src="/img/2022/08/01/picasso.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_picasso_111_1.png"/></td><td></td></tr><tr><td>vgg16 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_picasso_011_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_picasso_011_1.png"/></td><td></td></tr><tr><td>vgg19 resnet gram</td><td><img src="/img/2022/08/01/ablation/abl_picasso_101_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_picasso_101_1.png"/></td><td></td></tr><tr><td>vgg19 resnext mse</td><td><img src="/img/2022/08/01/ablation/abl_picasso_110_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_picasso_110_1.png"/></td><td></td></tr></table></details><details><summary>star</summary><table><tr><td>改进模型 vgg19 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_star_111_0.png"/></td><td><img src="/img/2022/08/01/star.png"/></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_star_111_1.png"/></td><td></td></tr><tr><td>vgg16 resnext gram</td><td><img src="/img/2022/08/01/ablation/abl_star_011_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_star_011_1.png"/></td><td></td></tr><tr><td>vgg19 resnet gram</td><td><img src="/img/2022/08/01/ablation/abl_star_101_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_star_101_1.png"/></td><td></td></tr><tr><td>vgg19 resnext mse</td><td><img src="/img/2022/08/01/ablation/abl_star_110_0.png"/></td><td></td></tr><tr><td></td><td><img src="/img/2022/08/01/ablation/abl_star_110_1.png"/></td><td></td></tr></table></details><h3 id="参考文献">参考文献</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>D. Kotovenko, M. Wright, A.Heimbrecht, and B. Ommer, “Rethinking style transfer: From pixels toparameterized brushstrokes,” CVPR, 2021.<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>T. Karras, M. Aittala, S.Laine, E. Härkönen, J. Hellsten, J. Lehtinen, and T. Aila, “Alias-freegenerative adversarial networks,” in Proc. NeurIPS, 2021.<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>A. Ramesh, P. Dhariwal, A.Nichol, C. Chu, and M. Chen, “Hierarchical text-conditional imagegeneration with clip latents,” arXiv preprint arXiv:2204.06125, 2022.<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><ahref="https://github.com/CortexFoundation/StyleTransferTrilogy">StyleTransferTrilogy</a><a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>L. A. Gatys, A. S. Ecker,and M. Bethge, “A neural algorithm of artistic style,” arXiv preprintarXiv:1508.06576, 2015.<a href="#fnref:5" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>J. Johnson, A. Alahi, and L.Fei-Fei, “Perceptual losses for real-time style transfer and superresolution,” in European conference on computer vision. Springer, 2016,pp. 694–711. <a href="#fnref:6" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>F. Shen, S. Yan, and G.Zeng, “Meta networks for neural style transfer,” arXiv preprintarXiv:1709.04111, 2017.<a href="#fnref:7" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>K. Simonyan and A.Zisserman, “Very deep convolutional networks for large-scale imagerecognition,” arXiv preprint arXiv:1409.1556, 2014.<a href="#fnref:8" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>S. Xie, R. Girshick, P.Dollár, Z. Tu, and K. He, “Aggregated residual transformations for deepneural networks,” in Proceedings of the IEEE conference on computervision and pattern recognition, 2017, pp. 1492–1500.<a href="#fnref:9" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Convolutional Neural Networks</tag>
      
      <tag>Style Transfer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>100 Prisoners Problem</title>
    <link href="/2022/07/29/100-prisoners-problem/"/>
    <url>/2022/07/29/100-prisoners-problem/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p><strong>背景</strong>：假设有 100 名从 1 - 100编号的囚犯，100张写有他们编号的纸条。这些纸条被放在密闭房间的 100个盒子中，编号也是 1 - 100。<br /><strong>操作</strong>：每名囚犯可以依次单独进入房间，打开这 100个盒子中的任意 50 个。<br /><strong>限制</strong>：完成后，他们必须还原并离开房间，并且无法以任何方式和其他囚犯交流。</p><p>在操作开始前，囚犯们可以商讨对策。<br /><strong>成功条件</strong>：所有囚犯在盒子中找到自己的编号。</p><h3 id="策略">策略</h3><h4 id="随机查看盒子">随机查看盒子</h4><p>每个囚犯找到自己编号的概率为 <spanclass="math inline">\(\frac{1}{2}\)</span><br />成功概率 P(success) = <span class="math inline">\((\frac{1}{2})^{100}\approx 0.000 0000000000000000000000000008\)</span></p><h4 id="循环链表策略">循环链表策略</h4><p>囚犯 <span class="math inline">\(P_a\)</span>进入房间后，先去找自己编号对应的盒子 <spanclass="math inline">\(B_a\)</span>，如果 <spanclass="math inline">\(B_a\)</span> 中的纸条是 a，则直接完成。<br />如果 <span class="math inline">\(B_a\)</span> 中的纸条为 b (<spanclass="math inline">\(b \not= a\)</span>)，则 <spanclass="math inline">\(P_a\)</span> 再去找盒子 <spanclass="math inline">\(B_b\)</span> ...... 直到找到盒子 <spanclass="math inline">\(B_n(1 \leq n \leq 100)\)</span>，其中的纸条为 a。<pre><code class=" mermaid">flowchart TB    A(开始) --&gt; Box_a    subgraph Box_a    b    end    subgraph Box_b    x    end    subgraph Box_n    a    end    b --&gt; Box_b    x -.若干步.-&gt; Box_n    a --&gt; Box_a</code></pre> 根据策略定义函数 <span class="math inline">\(f: B \toB\)</span>，含义：根据当前打开盒子中的纸条编号找到下一个盒子 <spanclass="math display">\[\begin{aligned}&amp; f(B_x)=B_{(x+k)\mod 100}, \\&amp; 0 &lt; x \leq 100, x \in \mathbb{Z}\\&amp; 0 \leq k &lt; 100, k \in \mathbb{Z}\end{aligned}\]</span></p><p><br /><strong>定理 1</strong> <span class="math display">\[\begin{aligned}&amp; \forall i \in \{x | 0 &lt; x \leq 100, x \in \mathbb{Z} \},\\&amp; \exists n \in \{x | 0 \leq x &lt; 100, x \in \mathbb{Z} \},\\&amp; f^n(B_i) = B_i\end{aligned}\]</span> <strong>证明</strong><br />即证 <span class="math inline">\(\exists n,\ (i + \sum_{j=1}^{n}k_j)\mod 100 = i\)</span><br />即证 <span class="math inline">\(\exists k&#39;,\ (i + k&#39;) \mod 100= i,\, 0 \leq k&#39; &lt; 100\)</span> 显然存在这样的 <spanclass="math inline">\(k&#39;\)</span>。</p><p>所以集合 B 由一系列不通长度的环形链表构成。这些链表构成集合 B的一个划分。</p><p><br /><strong>引理 1.</strong> <span class="math inline">\(f\)</span>可逆<br /><strong>证明</strong><br /><span class="math inline">\(\because\)</span> 盒子中的纸条是唯一的<br /><span class="math inline">\(\therefore\)</span>任意两个不同的盒子，内部的纸条不相同<br /><span class="math inline">\(\quad\)</span>即 <spanclass="math inline">\(\not\exists i,\ j,\ i \not= j, f(B_i) =f(B_j)\)</span><br /><span class="math inline">\(\therefore f\)</span> 是单射。<br /><span class="math inline">\(\therefore f\)</span> 可逆，且由于 <spanclass="math inline">\(f\)</span> 的定义域和值域相同， <spanclass="math inline">\(f^{-1}\)</span> 和 <spanclass="math inline">\(f\)</span> 的定义域相同。</p><p><br /><strong>定理 2</strong><br />根据引理 1 和引理 2，当 <span class="math inline">\(n \not= 1\)</span>时，<span class="math inline">\(f^{-1}(B_i) = f^{n -1}B_i\)</span>。<br />即囚犯可以通过执行 n - 1 次 <span class="math inline">\(f\)</span>操作找到对应的纸条。</p><p>所以只要保证不存在长度 &gt; 50的环形链表，囚犯就能按此策略找到自己的编号。<br />定义 <span class="math inline">\(Loop_n\)</span> 表示长度为 <spanclass="math inline">\(n\)</span> 的循环链表， <spanclass="math display">\[P(Loop_n) = \frac{环排列}{全排列} = \frac{\frac{P_n^n}{n}}{P_n^n} =\frac{1}{n}\]</span> <span class="math inline">\(P(Loop_{n&gt;50}) =\sum_{n=51}^{100}\frac{1}{n} \approx 0.6882\)</span><br /><span class="math inline">\(P(success) = 1 - P(Loop_{n&gt;50}) \approx0.3118\)</span></p><h3 id="有-2n-名囚犯时">有 <span class="math inline">\(2n\)</span>名囚犯时</h3><p>定义 <span class="math inline">\(H_n = \sum_{i=1}^n\frac{1}{n}\)</span><br /><span class="math inline">\(\begin{aligned} P(success) &amp; = 1 -(H_{2n} - H_n)\\ &amp; = 1 - (H_{2n} - \ln 2n) + (H_n - \ln2n)\\ &amp; =1 - (H_{2n} - \ln 2n) + (H_n - \ln n) - \ln 2 \end{aligned}\)</span></p><p>使用 Euler–Mascheroni 常数，<br /><span class="math inline">\(\lim \limits_{n \to \inf} (H_n - \ln n) =\gamma\)</span><br /><span class="math inline">\(\begin{aligned} \lim \limits_{n \to \inf}P(success) &amp; = 1 - \gamma + \gamma - \ln 2\\ &amp; = 1 - \ln 2\\&amp; = 0.3069 \end{aligned}\)</span></p><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span><a href="https://www.youtube.com/watch?v=iSNsgj1OCLA">TheRiddle That Seems Impossible Even If You Know The Answer</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span><a href="https://en.wikipedia.org/wiki/100_prisoners_problem">100Prisoners Problem</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Interesting Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 创建 root 用户</title>
    <link href="/2022/07/22/linux-root-user/"/>
    <url>/2022/07/22/linux-root-user/</url>
    
    <content type="html"><![CDATA[<p>网上搜到的几乎一模一样，都有修改 /etc/sudoers文件的步骤，但是我这里并没有这个文件。所以在这里记录一份，省的以后忘了再去搜了。</p><h3 id="步骤">步骤</h3><ol type="1"><li>首先登录 root 账户</li><li>新建用户 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser <span class="hljs-variable">$&#123;username&#125;</span><br></code></pre></td></tr></table></figure></li><li>创建密码 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd <span class="hljs-variable">$&#123;username&#125;</span><br></code></pre></td></tr></table></figure></li><li>将用户加入 sudo 组 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">usermod -aG sudo <span class="hljs-variable">$&#123;username&#125;</span><br></code></pre></td></tr></table></figure></li><li>切换到该用户 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su <span class="hljs-variable">$&#123;username&#125;</span><br></code></pre></td></tr></table></figure></li><li>使用 sudo<br />没有 sudo 命令的话，需要安装 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ls</span> -la /root<br></code></pre></td></tr></table></figure></li></ol><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span><a href="https://phoenixnap.com/kb/create-a-sudo-user-on-debian">Howto Create a Sudo User on Debian</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://linuxize.com/post/how-to-create-a-sudo-user-on-debian/">HowTo Create a Sudo User on Debian</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Debian11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cisco Anyconnect 和网络连接冲突</title>
    <link href="/2022/07/05/Cisco-Anyconnect/"/>
    <url>/2022/07/05/Cisco-Anyconnect/</url>
    
    <content type="html"><![CDATA[<h3 id="anyconnect-连接问题">Anyconnect 连接问题</h3><h3 id="问题发生时间">问题发生时间</h3><p>2022/07/04</p><h3 id="问题描述">问题描述</h3><p>在 Cisco Anyconnect中输入了一个地址（后来发现地址是错误的）并连接成功后，电脑就显示“无Internet，安全”。<br />另外发现此时 Anyconnect 无法更改地址，并且右键的 quit 选项消失。<br />通过重启关闭 Anyconnect 后，发现即使 Anyconnect没有运行，也无法连接网络。<br />再次打开 Anyconnect，上述情况依旧没有变化。</p><h3 id="解决方案">解决方案</h3><p><strong>重装 Anyconnect</strong><br />需要注意在设置中卸载不能解决问题，这样只是把 C:/Program Files(x86)中的程序卸载了，数据、配置等信息似乎并没有被一起删除。<br />所以需要<strong>到 C:/ProgramData/ 中删除 Cisco/ 后再重装</strong>。</p><h3 id="具体解决思路">具体解决思路</h3><ol type="1"><li>已知手机连接该网络能正常上网，所以不是网络的问题</li><li>然后尝试在电脑另一个系统中上网，可以上网则说明不是硬件的问题于是从软件的角度思考<br /></li><li>在网上搜索解决方案，大部分都是“连上 vpn 后，显示‘无Internet，安全’”，和本文的问题相似，但并不相同。试着根据那些方案修改网络设置、修改网络适配器，也确实没有应有的效果</li><li>尝试重装，从设置里卸载再重装也没有解决问题</li><li>找到一篇修改 Anyconnect 配置的博客，也不起作用</li><li>此时发现即使 Anyconnect被卸载了，其配置没有被删除，所以可能重装后的软件读取了原来有问题的配置</li><li>由于不知道原来的配置错在哪，所以索性直接删除，然后再安装</li><li>问题解决</li></ol><h3 id="后记">后记</h3><p>莫名其妙的问题还是得靠莫名其妙的方法，仅仅是做个记录。<br />大概有半年多没有用 Cisco Anyconnect了，出点问题也很正常。以后重装软件的时候还是得多留意一下是否卸载干净了。<br />这半年里为了学校里的 ROS 课程升级了win11，推测是因为系统升级导致原来的程序不可用了</p>]]></content>
    
    
    <categories>
      
      <category>Problems(Solved)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cisco Anyconnect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/19/hello-world/"/>
    <url>/2022/06/19/hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="测试">测试</h3><h3 id="一代码块">一、代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二表格">二、表格</h3><table><thead><tr class="header"><th style="text-align: center;">0</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">xx</td><td style="text-align: center;">xx</td><td style="text-align: center;">xx</td><td style="text-align: center;">xx</td></tr></tbody></table><h3 id="三latex">三、Latex</h3><p><span class="math display">\[E=mc^2\]</span></p><p><span class="math display">\[P(A\rightarrow x) = \frac{weight_x}{\sum_{i=1}^{n}weight_i}\]</span></p><h3 id="四mermaid">四、Mermaid</h3><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h3 id="四图片">四、图片</h3><figure><img src="/img/index/20220621_helloWorld_1280x720.png"alt="Hello World" /><figcaption aria-hidden="true">Hello World</figcaption></figure><h3id="五脚注1">五、脚注<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="参考资料1">[1]</span></a></sup></h3><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
